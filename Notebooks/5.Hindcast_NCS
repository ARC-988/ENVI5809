{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "05576750-1087-4f4f-9b56-2721cda5b7e1",
   "metadata": {},
   "source": [
    "# Import Libraries"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "2da6117f-97da-48c6-bed4-3dfd6a760af9",
   "metadata": {},
   "outputs": [],
   "source": [
    "import xarray as xr\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "import geopandas as gpd\n",
    "from shapely.geometry import Point\n",
    "import cartopy.crs as ccrs\n",
    "import cartopy.feature as cfeature\n",
    "import os\n",
    "import matplotlib.ticker as mticker"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "561b53cc-d955-43bb-8601-948894a646fd",
   "metadata": {},
   "source": [
    "# Open Hindcast files\n",
    "### Remove bad file "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "041a9105-8bb1-4247-b866-e449ba4f5424",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Good files found: 473\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div><svg style=\"position: absolute; width: 0; height: 0; overflow: hidden\">\n",
       "<defs>\n",
       "<symbol id=\"icon-database\" viewBox=\"0 0 32 32\">\n",
       "<path d=\"M16 0c-8.837 0-16 2.239-16 5v4c0 2.761 7.163 5 16 5s16-2.239 16-5v-4c0-2.761-7.163-5-16-5z\"></path>\n",
       "<path d=\"M16 17c-8.837 0-16-2.239-16-5v6c0 2.761 7.163 5 16 5s16-2.239 16-5v-6c0 2.761-7.163 5-16 5z\"></path>\n",
       "<path d=\"M16 26c-8.837 0-16-2.239-16-5v6c0 2.761 7.163 5 16 5s16-2.239 16-5v-6c0 2.761-7.163 5-16 5z\"></path>\n",
       "</symbol>\n",
       "<symbol id=\"icon-file-text2\" viewBox=\"0 0 32 32\">\n",
       "<path d=\"M28.681 7.159c-0.694-0.947-1.662-2.053-2.724-3.116s-2.169-2.030-3.116-2.724c-1.612-1.182-2.393-1.319-2.841-1.319h-15.5c-1.378 0-2.5 1.121-2.5 2.5v27c0 1.378 1.122 2.5 2.5 2.5h23c1.378 0 2.5-1.122 2.5-2.5v-19.5c0-0.448-0.137-1.23-1.319-2.841zM24.543 5.457c0.959 0.959 1.712 1.825 2.268 2.543h-4.811v-4.811c0.718 0.556 1.584 1.309 2.543 2.268zM28 29.5c0 0.271-0.229 0.5-0.5 0.5h-23c-0.271 0-0.5-0.229-0.5-0.5v-27c0-0.271 0.229-0.5 0.5-0.5 0 0 15.499-0 15.5 0v7c0 0.552 0.448 1 1 1h7v19.5z\"></path>\n",
       "<path d=\"M23 26h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z\"></path>\n",
       "<path d=\"M23 22h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z\"></path>\n",
       "<path d=\"M23 18h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z\"></path>\n",
       "</symbol>\n",
       "</defs>\n",
       "</svg>\n",
       "<style>/* CSS stylesheet for displaying xarray objects in jupyterlab.\n",
       " *\n",
       " */\n",
       "\n",
       ":root {\n",
       "  --xr-font-color0: var(--jp-content-font-color0, rgba(0, 0, 0, 1));\n",
       "  --xr-font-color2: var(--jp-content-font-color2, rgba(0, 0, 0, 0.54));\n",
       "  --xr-font-color3: var(--jp-content-font-color3, rgba(0, 0, 0, 0.38));\n",
       "  --xr-border-color: var(--jp-border-color2, #e0e0e0);\n",
       "  --xr-disabled-color: var(--jp-layout-color3, #bdbdbd);\n",
       "  --xr-background-color: var(--jp-layout-color0, white);\n",
       "  --xr-background-color-row-even: var(--jp-layout-color1, white);\n",
       "  --xr-background-color-row-odd: var(--jp-layout-color2, #eeeeee);\n",
       "}\n",
       "\n",
       "html[theme=\"dark\"],\n",
       "html[data-theme=\"dark\"],\n",
       "body[data-theme=\"dark\"],\n",
       "body.vscode-dark {\n",
       "  --xr-font-color0: rgba(255, 255, 255, 1);\n",
       "  --xr-font-color2: rgba(255, 255, 255, 0.54);\n",
       "  --xr-font-color3: rgba(255, 255, 255, 0.38);\n",
       "  --xr-border-color: #1f1f1f;\n",
       "  --xr-disabled-color: #515151;\n",
       "  --xr-background-color: #111111;\n",
       "  --xr-background-color-row-even: #111111;\n",
       "  --xr-background-color-row-odd: #313131;\n",
       "}\n",
       "\n",
       ".xr-wrap {\n",
       "  display: block !important;\n",
       "  min-width: 300px;\n",
       "  max-width: 700px;\n",
       "}\n",
       "\n",
       ".xr-text-repr-fallback {\n",
       "  /* fallback to plain text repr when CSS is not injected (untrusted notebook) */\n",
       "  display: none;\n",
       "}\n",
       "\n",
       ".xr-header {\n",
       "  padding-top: 6px;\n",
       "  padding-bottom: 6px;\n",
       "  margin-bottom: 4px;\n",
       "  border-bottom: solid 1px var(--xr-border-color);\n",
       "}\n",
       "\n",
       ".xr-header > div,\n",
       ".xr-header > ul {\n",
       "  display: inline;\n",
       "  margin-top: 0;\n",
       "  margin-bottom: 0;\n",
       "}\n",
       "\n",
       ".xr-obj-type,\n",
       ".xr-array-name {\n",
       "  margin-left: 2px;\n",
       "  margin-right: 10px;\n",
       "}\n",
       "\n",
       ".xr-obj-type {\n",
       "  color: var(--xr-font-color2);\n",
       "}\n",
       "\n",
       ".xr-sections {\n",
       "  padding-left: 0 !important;\n",
       "  display: grid;\n",
       "  grid-template-columns: 150px auto auto 1fr 0 20px 0 20px;\n",
       "}\n",
       "\n",
       ".xr-section-item {\n",
       "  display: contents;\n",
       "}\n",
       "\n",
       ".xr-section-item input {\n",
       "  display: inline-block;\n",
       "  opacity: 0;\n",
       "  height: 0;\n",
       "}\n",
       "\n",
       ".xr-section-item input + label {\n",
       "  color: var(--xr-disabled-color);\n",
       "}\n",
       "\n",
       ".xr-section-item input:enabled + label {\n",
       "  cursor: pointer;\n",
       "  color: var(--xr-font-color2);\n",
       "}\n",
       "\n",
       ".xr-section-item input:focus + label {\n",
       "  border: 2px solid var(--xr-font-color0);\n",
       "}\n",
       "\n",
       ".xr-section-item input:enabled + label:hover {\n",
       "  color: var(--xr-font-color0);\n",
       "}\n",
       "\n",
       ".xr-section-summary {\n",
       "  grid-column: 1;\n",
       "  color: var(--xr-font-color2);\n",
       "  font-weight: 500;\n",
       "}\n",
       "\n",
       ".xr-section-summary > span {\n",
       "  display: inline-block;\n",
       "  padding-left: 0.5em;\n",
       "}\n",
       "\n",
       ".xr-section-summary-in:disabled + label {\n",
       "  color: var(--xr-font-color2);\n",
       "}\n",
       "\n",
       ".xr-section-summary-in + label:before {\n",
       "  display: inline-block;\n",
       "  content: \"►\";\n",
       "  font-size: 11px;\n",
       "  width: 15px;\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       ".xr-section-summary-in:disabled + label:before {\n",
       "  color: var(--xr-disabled-color);\n",
       "}\n",
       "\n",
       ".xr-section-summary-in:checked + label:before {\n",
       "  content: \"▼\";\n",
       "}\n",
       "\n",
       ".xr-section-summary-in:checked + label > span {\n",
       "  display: none;\n",
       "}\n",
       "\n",
       ".xr-section-summary,\n",
       ".xr-section-inline-details {\n",
       "  padding-top: 4px;\n",
       "  padding-bottom: 4px;\n",
       "}\n",
       "\n",
       ".xr-section-inline-details {\n",
       "  grid-column: 2 / -1;\n",
       "}\n",
       "\n",
       ".xr-section-details {\n",
       "  display: none;\n",
       "  grid-column: 1 / -1;\n",
       "  margin-bottom: 5px;\n",
       "}\n",
       "\n",
       ".xr-section-summary-in:checked ~ .xr-section-details {\n",
       "  display: contents;\n",
       "}\n",
       "\n",
       ".xr-array-wrap {\n",
       "  grid-column: 1 / -1;\n",
       "  display: grid;\n",
       "  grid-template-columns: 20px auto;\n",
       "}\n",
       "\n",
       ".xr-array-wrap > label {\n",
       "  grid-column: 1;\n",
       "  vertical-align: top;\n",
       "}\n",
       "\n",
       ".xr-preview {\n",
       "  color: var(--xr-font-color3);\n",
       "}\n",
       "\n",
       ".xr-array-preview,\n",
       ".xr-array-data {\n",
       "  padding: 0 5px !important;\n",
       "  grid-column: 2;\n",
       "}\n",
       "\n",
       ".xr-array-data,\n",
       ".xr-array-in:checked ~ .xr-array-preview {\n",
       "  display: none;\n",
       "}\n",
       "\n",
       ".xr-array-in:checked ~ .xr-array-data,\n",
       ".xr-array-preview {\n",
       "  display: inline-block;\n",
       "}\n",
       "\n",
       ".xr-dim-list {\n",
       "  display: inline-block !important;\n",
       "  list-style: none;\n",
       "  padding: 0 !important;\n",
       "  margin: 0;\n",
       "}\n",
       "\n",
       ".xr-dim-list li {\n",
       "  display: inline-block;\n",
       "  padding: 0;\n",
       "  margin: 0;\n",
       "}\n",
       "\n",
       ".xr-dim-list:before {\n",
       "  content: \"(\";\n",
       "}\n",
       "\n",
       ".xr-dim-list:after {\n",
       "  content: \")\";\n",
       "}\n",
       "\n",
       ".xr-dim-list li:not(:last-child):after {\n",
       "  content: \",\";\n",
       "  padding-right: 5px;\n",
       "}\n",
       "\n",
       ".xr-has-index {\n",
       "  font-weight: bold;\n",
       "}\n",
       "\n",
       ".xr-var-list,\n",
       ".xr-var-item {\n",
       "  display: contents;\n",
       "}\n",
       "\n",
       ".xr-var-item > div,\n",
       ".xr-var-item label,\n",
       ".xr-var-item > .xr-var-name span {\n",
       "  background-color: var(--xr-background-color-row-even);\n",
       "  margin-bottom: 0;\n",
       "}\n",
       "\n",
       ".xr-var-item > .xr-var-name:hover span {\n",
       "  padding-right: 5px;\n",
       "}\n",
       "\n",
       ".xr-var-list > li:nth-child(odd) > div,\n",
       ".xr-var-list > li:nth-child(odd) > label,\n",
       ".xr-var-list > li:nth-child(odd) > .xr-var-name span {\n",
       "  background-color: var(--xr-background-color-row-odd);\n",
       "}\n",
       "\n",
       ".xr-var-name {\n",
       "  grid-column: 1;\n",
       "}\n",
       "\n",
       ".xr-var-dims {\n",
       "  grid-column: 2;\n",
       "}\n",
       "\n",
       ".xr-var-dtype {\n",
       "  grid-column: 3;\n",
       "  text-align: right;\n",
       "  color: var(--xr-font-color2);\n",
       "}\n",
       "\n",
       ".xr-var-preview {\n",
       "  grid-column: 4;\n",
       "}\n",
       "\n",
       ".xr-index-preview {\n",
       "  grid-column: 2 / 5;\n",
       "  color: var(--xr-font-color2);\n",
       "}\n",
       "\n",
       ".xr-var-name,\n",
       ".xr-var-dims,\n",
       ".xr-var-dtype,\n",
       ".xr-preview,\n",
       ".xr-attrs dt {\n",
       "  white-space: nowrap;\n",
       "  overflow: hidden;\n",
       "  text-overflow: ellipsis;\n",
       "  padding-right: 10px;\n",
       "}\n",
       "\n",
       ".xr-var-name:hover,\n",
       ".xr-var-dims:hover,\n",
       ".xr-var-dtype:hover,\n",
       ".xr-attrs dt:hover {\n",
       "  overflow: visible;\n",
       "  width: auto;\n",
       "  z-index: 1;\n",
       "}\n",
       "\n",
       ".xr-var-attrs,\n",
       ".xr-var-data,\n",
       ".xr-index-data {\n",
       "  display: none;\n",
       "  background-color: var(--xr-background-color) !important;\n",
       "  padding-bottom: 5px !important;\n",
       "}\n",
       "\n",
       ".xr-var-attrs-in:checked ~ .xr-var-attrs,\n",
       ".xr-var-data-in:checked ~ .xr-var-data,\n",
       ".xr-index-data-in:checked ~ .xr-index-data {\n",
       "  display: block;\n",
       "}\n",
       "\n",
       ".xr-var-data > table {\n",
       "  float: right;\n",
       "}\n",
       "\n",
       ".xr-var-name span,\n",
       ".xr-var-data,\n",
       ".xr-index-name div,\n",
       ".xr-index-data,\n",
       ".xr-attrs {\n",
       "  padding-left: 25px !important;\n",
       "}\n",
       "\n",
       ".xr-attrs,\n",
       ".xr-var-attrs,\n",
       ".xr-var-data,\n",
       ".xr-index-data {\n",
       "  grid-column: 1 / -1;\n",
       "}\n",
       "\n",
       "dl.xr-attrs {\n",
       "  padding: 0;\n",
       "  margin: 0;\n",
       "  display: grid;\n",
       "  grid-template-columns: 125px auto;\n",
       "}\n",
       "\n",
       ".xr-attrs dt,\n",
       ".xr-attrs dd {\n",
       "  padding: 0;\n",
       "  margin: 0;\n",
       "  float: left;\n",
       "  padding-right: 10px;\n",
       "  width: auto;\n",
       "}\n",
       "\n",
       ".xr-attrs dt {\n",
       "  font-weight: normal;\n",
       "  grid-column: 1;\n",
       "}\n",
       "\n",
       ".xr-attrs dt:hover span {\n",
       "  display: inline-block;\n",
       "  background: var(--xr-background-color);\n",
       "  padding-right: 10px;\n",
       "}\n",
       "\n",
       ".xr-attrs dd {\n",
       "  grid-column: 2;\n",
       "  white-space: pre-wrap;\n",
       "  word-break: break-all;\n",
       "}\n",
       "\n",
       ".xr-icon-database,\n",
       ".xr-icon-file-text2,\n",
       ".xr-no-icon {\n",
       "  display: inline-block;\n",
       "  vertical-align: middle;\n",
       "  width: 1em;\n",
       "  height: 1.5em !important;\n",
       "  stroke-width: 0;\n",
       "  stroke: currentColor;\n",
       "  fill: currentColor;\n",
       "}\n",
       "</style><pre class='xr-text-repr-fallback'>&lt;xarray.Dataset&gt; Size: 33MB\n",
       "Dimensions:    (point: 473, time: 2904)\n",
       "Coordinates:\n",
       "    longitude  (point) float32 2kB 151.6 151.7 151.7 151.8 ... 152.0 152.1 152.1\n",
       "    latitude   (point) float32 2kB -24.0 -24.0 -24.0 ... -22.47 -22.47 -22.47\n",
       "  * time       (time) datetime64[ns] 23kB 2024-12-01 ... 2025-03-31T23:00:00....\n",
       "Dimensions without coordinates: point\n",
       "Data variables:\n",
       "    hs         (point, time) float32 5MB dask.array&lt;chunksize=(1, 2904), meta=np.ndarray&gt;\n",
       "    t02        (point, time) float32 5MB dask.array&lt;chunksize=(1, 2904), meta=np.ndarray&gt;\n",
       "    fp         (point, time) float32 5MB dask.array&lt;chunksize=(1, 2904), meta=np.ndarray&gt;\n",
       "    dir        (point, time) float32 5MB dask.array&lt;chunksize=(1, 2904), meta=np.ndarray&gt;\n",
       "    dp         (point, time) float32 5MB dask.array&lt;chunksize=(1, 2904), meta=np.ndarray&gt;\n",
       "    cge        (point, time) float32 5MB dask.array&lt;chunksize=(1, 2904), meta=np.ndarray&gt;\n",
       "Attributes: (12/17)\n",
       "    WAVEWATCH_III_version_number:           4.18b\n",
       "    WAVEWATCH_III_switches:                 F90 NOGRB LRB4 DIST MPI NOPA UQ P...\n",
       "    SIN4 namelist parameter BETAMAX:        1.33\n",
       "    SDS4 namelist parameter WHITECAPWIDTH:  0.3\n",
       "    product_name:                           ww3.aus_4m.202412.nc\n",
       "    area:                                   4 min Australian grid\n",
       "    ...                                     ...\n",
       "    easternmost_longitude:                  175.0000000\n",
       "    minimum_altitude:                       -12000 m\n",
       "    maximum_altitude:                       9000 m\n",
       "    altitude_resolution:                    n/a\n",
       "    start_date:                             2024-12-01T00:00:00Z\n",
       "    stop_date:                              2024-12-31T23:00:00Z</pre><div class='xr-wrap' style='display:none'><div class='xr-header'><div class='xr-obj-type'>xarray.Dataset</div></div><ul class='xr-sections'><li class='xr-section-item'><input id='section-8dc2f433-a136-4f68-a840-bce9b92831e8' class='xr-section-summary-in' type='checkbox' disabled ><label for='section-8dc2f433-a136-4f68-a840-bce9b92831e8' class='xr-section-summary'  title='Expand/collapse section'>Dimensions:</label><div class='xr-section-inline-details'><ul class='xr-dim-list'><li><span>point</span>: 473</li><li><span class='xr-has-index'>time</span>: 2904</li></ul></div><div class='xr-section-details'></div></li><li class='xr-section-item'><input id='section-592374a7-f991-44fc-b3dc-4216270bab61' class='xr-section-summary-in' type='checkbox'  checked><label for='section-592374a7-f991-44fc-b3dc-4216270bab61' class='xr-section-summary' >Coordinates: <span>(3)</span></label><div class='xr-section-inline-details'></div><div class='xr-section-details'><ul class='xr-var-list'><li class='xr-var-item'><div class='xr-var-name'><span>longitude</span></div><div class='xr-var-dims'>(point)</div><div class='xr-var-dtype'>float32</div><div class='xr-var-preview xr-preview'>151.6 151.7 151.7 ... 152.1 152.1</div><input id='attrs-bf4a2206-c2e0-4b59-b6e2-64d4b7aa91a6' class='xr-var-attrs-in' type='checkbox' ><label for='attrs-bf4a2206-c2e0-4b59-b6e2-64d4b7aa91a6' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-bf9eef11-1810-4c3e-959a-dc7fb8787f1e' class='xr-var-data-in' type='checkbox'><label for='data-bf9eef11-1810-4c3e-959a-dc7fb8787f1e' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'><dt><span>units :</span></dt><dd>degree_east</dd><dt><span>long_name :</span></dt><dd>longitude</dd><dt><span>standard_name :</span></dt><dd>longitude</dd><dt><span>valid_min :</span></dt><dd>-180.0</dd><dt><span>valid_max :</span></dt><dd>180.0</dd><dt><span>axis :</span></dt><dd>X</dd></dl></div><div class='xr-var-data'><pre>array([151.60027, 151.66693, 151.7336 , 151.80026, 151.86693, 151.9336 ,\n",
       "       152.00026, 152.06693, 152.13359, 152.20026, 152.26692, 152.33359,\n",
       "       152.40027, 152.46693, 152.5336 , 152.60027, 152.66693, 152.7336 ,\n",
       "       152.80026, 152.86693, 152.9336 , 153.00026, 151.60027, 151.66693,\n",
       "       151.7336 , 151.80026, 151.86693, 151.9336 , 152.00026, 152.06693,\n",
       "       152.13359, 152.20026, 152.26692, 152.33359, 152.40027, 152.46693,\n",
       "       152.5336 , 152.60027, 152.66693, 152.7336 , 152.80026, 152.86693,\n",
       "       152.9336 , 153.00026, 151.53358, 151.60027, 151.66693, 151.7336 ,\n",
       "       151.80026, 151.86693, 151.9336 , 152.00026, 152.06693, 152.13359,\n",
       "       152.20026, 152.26692, 152.33359, 152.40027, 152.46693, 152.5336 ,\n",
       "       152.60027, 152.66693, 152.7336 , 152.80026, 152.86693, 152.9336 ,\n",
       "       151.53358, 151.60027, 151.66693, 151.7336 , 151.80026, 151.86693,\n",
       "       151.9336 , 152.00026, 152.06693, 152.13359, 152.20026, 152.26692,\n",
       "       152.33359, 152.40027, 152.46693, 152.5336 , 152.60027, 152.66693,\n",
       "       152.7336 , 152.80026, 152.86693, 152.9336 , 151.53358, 151.60027,\n",
       "       151.66693, 151.7336 , 151.80026, 151.86693, 151.9336 , 152.00026,\n",
       "       152.06693, 152.13359, 152.20026, 152.33359, 152.40027, 152.46693,\n",
       "       152.5336 , 152.60027, 152.66693, 152.7336 , 152.80026, 152.86693,\n",
       "       151.46692, 151.53358, 151.60027, 151.66693, 151.7336 , 151.80026,\n",
       "       151.86693, 151.9336 , 152.00026, 152.06693, 152.13359, 152.20026,\n",
       "...\n",
       "       152.00026, 152.06693, 152.13359, 152.20026, 152.26692, 152.33359,\n",
       "       151.13359, 151.20026, 151.26692, 151.33359, 151.40025, 151.46692,\n",
       "       151.53358, 151.60027, 151.66693, 151.7336 , 151.80026, 151.86693,\n",
       "       151.9336 , 152.00026, 152.06693, 152.13359, 152.20026, 152.26692,\n",
       "       152.33359, 151.13359, 151.20026, 151.26692, 151.33359, 151.40025,\n",
       "       151.46692, 151.53358, 151.60027, 151.66693, 151.7336 , 151.80026,\n",
       "       151.86693, 151.9336 , 152.00026, 152.06693, 152.13359, 152.20026,\n",
       "       152.26692, 151.06693, 151.13359, 151.20026, 151.26692, 151.33359,\n",
       "       151.40025, 151.46692, 151.53358, 151.60027, 151.66693, 151.7336 ,\n",
       "       151.80026, 151.86693, 151.9336 , 152.00026, 152.06693, 152.13359,\n",
       "       152.20026, 151.06693, 151.13359, 151.20026, 151.26692, 151.33359,\n",
       "       151.40025, 151.46692, 151.53358, 151.60027, 151.66693, 151.7336 ,\n",
       "       151.80026, 151.86693, 151.9336 , 152.00026, 152.06693, 152.13359,\n",
       "       152.20026, 151.06693, 151.13359, 151.20026, 151.26692, 151.33359,\n",
       "       151.40025, 151.46692, 151.53358, 151.60027, 151.66693, 151.7336 ,\n",
       "       151.80026, 151.86693, 151.9336 , 152.00026, 152.06693, 152.13359,\n",
       "       151.00026, 151.06693, 151.13359, 151.20026, 151.26692, 151.33359,\n",
       "       151.46692, 151.53358, 151.60027, 151.66693, 151.7336 , 151.80026,\n",
       "       151.86693, 151.9336 , 152.00026, 152.06693, 152.13359],\n",
       "      dtype=float32)</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>latitude</span></div><div class='xr-var-dims'>(point)</div><div class='xr-var-dtype'>float32</div><div class='xr-var-preview xr-preview'>-24.0 -24.0 -24.0 ... -22.47 -22.47</div><input id='attrs-dbdd331c-fc0a-4236-ba65-7adf07f8aa91' class='xr-var-attrs-in' type='checkbox' ><label for='attrs-dbdd331c-fc0a-4236-ba65-7adf07f8aa91' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-74062c13-f528-43b0-9643-8df60de7f9c8' class='xr-var-data-in' type='checkbox'><label for='data-74062c13-f528-43b0-9643-8df60de7f9c8' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'><dt><span>units :</span></dt><dd>degree_north</dd><dt><span>long_name :</span></dt><dd>latitude</dd><dt><span>standard_name :</span></dt><dd>latitude</dd><dt><span>valid_min :</span></dt><dd>-90.0</dd><dt><span>valid_max :</span></dt><dd>90.0</dd><dt><span>axis :</span></dt><dd>Y</dd></dl></div><div class='xr-var-data'><pre>array([-23.99987 , -23.99987 , -23.99987 , -23.99987 , -23.99987 ,\n",
       "       -23.99987 , -23.99987 , -23.99987 , -23.99987 , -23.99987 ,\n",
       "       -23.99987 , -23.99987 , -23.99987 , -23.99987 , -23.99987 ,\n",
       "       -23.99987 , -23.99987 , -23.99987 , -23.99987 , -23.99987 ,\n",
       "       -23.99987 , -23.99987 , -23.933203, -23.933203, -23.933203,\n",
       "       -23.933203, -23.933203, -23.933203, -23.933203, -23.933203,\n",
       "       -23.933203, -23.933203, -23.933203, -23.933203, -23.933203,\n",
       "       -23.933203, -23.933203, -23.933203, -23.933203, -23.933203,\n",
       "       -23.933203, -23.933203, -23.933203, -23.933203, -23.866535,\n",
       "       -23.866535, -23.866535, -23.866535, -23.866535, -23.866535,\n",
       "       -23.866535, -23.866535, -23.866535, -23.866535, -23.866535,\n",
       "       -23.866535, -23.866535, -23.866535, -23.866535, -23.866535,\n",
       "       -23.866535, -23.866535, -23.866535, -23.866535, -23.866535,\n",
       "       -23.866535, -23.79987 , -23.79987 , -23.79987 , -23.79987 ,\n",
       "       -23.79987 , -23.79987 , -23.79987 , -23.79987 , -23.79987 ,\n",
       "       -23.79987 , -23.79987 , -23.79987 , -23.79987 , -23.79987 ,\n",
       "       -23.79987 , -23.79987 , -23.79987 , -23.79987 , -23.79987 ,\n",
       "       -23.79987 , -23.79987 , -23.79987 , -23.733202, -23.733202,\n",
       "       -23.733202, -23.733202, -23.733202, -23.733202, -23.733202,\n",
       "       -23.733202, -23.733202, -23.733202, -23.733202, -23.733202,\n",
       "...\n",
       "       -22.799864, -22.799864, -22.799864, -22.799864, -22.799864,\n",
       "       -22.799864, -22.799864, -22.799864, -22.799864, -22.799864,\n",
       "       -22.733196, -22.733196, -22.733196, -22.733196, -22.733196,\n",
       "       -22.733196, -22.733196, -22.733196, -22.733196, -22.733196,\n",
       "       -22.733196, -22.733196, -22.733196, -22.733196, -22.733196,\n",
       "       -22.733196, -22.733196, -22.733196, -22.66653 , -22.66653 ,\n",
       "       -22.66653 , -22.66653 , -22.66653 , -22.66653 , -22.66653 ,\n",
       "       -22.66653 , -22.66653 , -22.66653 , -22.66653 , -22.66653 ,\n",
       "       -22.66653 , -22.66653 , -22.66653 , -22.66653 , -22.66653 ,\n",
       "       -22.66653 , -22.599863, -22.599863, -22.599863, -22.599863,\n",
       "       -22.599863, -22.599863, -22.599863, -22.599863, -22.599863,\n",
       "       -22.599863, -22.599863, -22.599863, -22.599863, -22.599863,\n",
       "       -22.599863, -22.599863, -22.599863, -22.599863, -22.533195,\n",
       "       -22.533195, -22.533195, -22.533195, -22.533195, -22.533195,\n",
       "       -22.533195, -22.533195, -22.533195, -22.533195, -22.533195,\n",
       "       -22.533195, -22.533195, -22.533195, -22.533195, -22.533195,\n",
       "       -22.533195, -22.46653 , -22.46653 , -22.46653 , -22.46653 ,\n",
       "       -22.46653 , -22.46653 , -22.46653 , -22.46653 , -22.46653 ,\n",
       "       -22.46653 , -22.46653 , -22.46653 , -22.46653 , -22.46653 ,\n",
       "       -22.46653 , -22.46653 , -22.46653 ], dtype=float32)</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span class='xr-has-index'>time</span></div><div class='xr-var-dims'>(time)</div><div class='xr-var-dtype'>datetime64[ns]</div><div class='xr-var-preview xr-preview'>2024-12-01 ... 2025-03-31T23:00:...</div><input id='attrs-f3bc00f3-70f0-4b01-a611-3544afd32a0c' class='xr-var-attrs-in' type='checkbox' ><label for='attrs-f3bc00f3-70f0-4b01-a611-3544afd32a0c' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-9643f0fa-de6a-43e7-bbd7-738010b11d67' class='xr-var-data-in' type='checkbox'><label for='data-9643f0fa-de6a-43e7-bbd7-738010b11d67' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'><dt><span>long_name :</span></dt><dd>julian day (UT)</dd><dt><span>standard_name :</span></dt><dd>time</dd><dt><span>conventions :</span></dt><dd>relative julian days with decimal part (as parts of the day )</dd><dt><span>axis :</span></dt><dd>T</dd></dl></div><div class='xr-var-data'><pre>array([&#x27;2024-12-01T00:00:00.000000000&#x27;, &#x27;2024-12-01T00:59:59.999986560&#x27;,\n",
       "       &#x27;2024-12-01T02:00:00.000013440&#x27;, ..., &#x27;2025-03-31T21:00:00.000000000&#x27;,\n",
       "       &#x27;2025-03-31T21:59:59.999986560&#x27;, &#x27;2025-03-31T23:00:00.000013440&#x27;],\n",
       "      dtype=&#x27;datetime64[ns]&#x27;)</pre></div></li></ul></div></li><li class='xr-section-item'><input id='section-b01bd699-1859-4340-97d9-adc7daa1c93a' class='xr-section-summary-in' type='checkbox'  checked><label for='section-b01bd699-1859-4340-97d9-adc7daa1c93a' class='xr-section-summary' >Data variables: <span>(6)</span></label><div class='xr-section-inline-details'></div><div class='xr-section-details'><ul class='xr-var-list'><li class='xr-var-item'><div class='xr-var-name'><span>hs</span></div><div class='xr-var-dims'>(point, time)</div><div class='xr-var-dtype'>float32</div><div class='xr-var-preview xr-preview'>dask.array&lt;chunksize=(1, 2904), meta=np.ndarray&gt;</div><input id='attrs-54a4a6bc-d948-4a13-a90e-40e95e29d3ea' class='xr-var-attrs-in' type='checkbox' ><label for='attrs-54a4a6bc-d948-4a13-a90e-40e95e29d3ea' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-47477b47-e007-4263-be1f-0bfdd3073def' class='xr-var-data-in' type='checkbox'><label for='data-47477b47-e007-4263-be1f-0bfdd3073def' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'><dt><span>long_name :</span></dt><dd>significant height of wind and swell waves</dd><dt><span>standard_name :</span></dt><dd>sea_surface_wave_significant_height</dd><dt><span>globwave_name :</span></dt><dd>significant_wave_height</dd><dt><span>units :</span></dt><dd>m</dd><dt><span>valid_min :</span></dt><dd>0</dd><dt><span>valid_max :</span></dt><dd>32000</dd></dl></div><div class='xr-var-data'><table>\n",
       "    <tr>\n",
       "        <td>\n",
       "            <table style=\"border-collapse: collapse;\">\n",
       "                <thead>\n",
       "                    <tr>\n",
       "                        <td> </td>\n",
       "                        <th> Array </th>\n",
       "                        <th> Chunk </th>\n",
       "                    </tr>\n",
       "                </thead>\n",
       "                <tbody>\n",
       "                    \n",
       "                    <tr>\n",
       "                        <th> Bytes </th>\n",
       "                        <td> 5.24 MiB </td>\n",
       "                        <td> 11.34 kiB </td>\n",
       "                    </tr>\n",
       "                    \n",
       "                    <tr>\n",
       "                        <th> Shape </th>\n",
       "                        <td> (473, 2904) </td>\n",
       "                        <td> (1, 2904) </td>\n",
       "                    </tr>\n",
       "                    <tr>\n",
       "                        <th> Dask graph </th>\n",
       "                        <td colspan=\"2\"> 473 chunks in 1420 graph layers </td>\n",
       "                    </tr>\n",
       "                    <tr>\n",
       "                        <th> Data type </th>\n",
       "                        <td colspan=\"2\"> float32 numpy.ndarray </td>\n",
       "                    </tr>\n",
       "                </tbody>\n",
       "            </table>\n",
       "        </td>\n",
       "        <td>\n",
       "        <svg width=\"170\" height=\"91\" style=\"stroke:rgb(0,0,0);stroke-width:1\" >\n",
       "\n",
       "  <!-- Horizontal lines -->\n",
       "  <line x1=\"0\" y1=\"0\" x2=\"120\" y2=\"0\" style=\"stroke-width:2\" />\n",
       "  <line x1=\"0\" y1=\"2\" x2=\"120\" y2=\"2\" />\n",
       "  <line x1=\"0\" y1=\"4\" x2=\"120\" y2=\"4\" />\n",
       "  <line x1=\"0\" y1=\"6\" x2=\"120\" y2=\"6\" />\n",
       "  <line x1=\"0\" y1=\"8\" x2=\"120\" y2=\"8\" />\n",
       "  <line x1=\"0\" y1=\"10\" x2=\"120\" y2=\"10\" />\n",
       "  <line x1=\"0\" y1=\"12\" x2=\"120\" y2=\"12\" />\n",
       "  <line x1=\"0\" y1=\"15\" x2=\"120\" y2=\"15\" />\n",
       "  <line x1=\"0\" y1=\"17\" x2=\"120\" y2=\"17\" />\n",
       "  <line x1=\"0\" y1=\"19\" x2=\"120\" y2=\"19\" />\n",
       "  <line x1=\"0\" y1=\"21\" x2=\"120\" y2=\"21\" />\n",
       "  <line x1=\"0\" y1=\"23\" x2=\"120\" y2=\"23\" />\n",
       "  <line x1=\"0\" y1=\"25\" x2=\"120\" y2=\"25\" />\n",
       "  <line x1=\"0\" y1=\"28\" x2=\"120\" y2=\"28\" />\n",
       "  <line x1=\"0\" y1=\"30\" x2=\"120\" y2=\"30\" />\n",
       "  <line x1=\"0\" y1=\"32\" x2=\"120\" y2=\"32\" />\n",
       "  <line x1=\"0\" y1=\"34\" x2=\"120\" y2=\"34\" />\n",
       "  <line x1=\"0\" y1=\"36\" x2=\"120\" y2=\"36\" />\n",
       "  <line x1=\"0\" y1=\"38\" x2=\"120\" y2=\"38\" />\n",
       "  <line x1=\"0\" y1=\"41\" x2=\"120\" y2=\"41\" style=\"stroke-width:2\" />\n",
       "\n",
       "  <!-- Vertical lines -->\n",
       "  <line x1=\"0\" y1=\"0\" x2=\"0\" y2=\"41\" style=\"stroke-width:2\" />\n",
       "  <line x1=\"120\" y1=\"0\" x2=\"120\" y2=\"41\" style=\"stroke-width:2\" />\n",
       "\n",
       "  <!-- Colored Rectangle -->\n",
       "  <polygon points=\"0.0,0.0 120.0,0.0 120.0,41.09722082588334 0.0,41.09722082588334\" style=\"fill:#8B4903A0;stroke-width:0\"/>\n",
       "\n",
       "  <!-- Text -->\n",
       "  <text x=\"60.000000\" y=\"61.097221\" font-size=\"1.0rem\" font-weight=\"100\" text-anchor=\"middle\" >2904</text>\n",
       "  <text x=\"140.000000\" y=\"20.548610\" font-size=\"1.0rem\" font-weight=\"100\" text-anchor=\"middle\" transform=\"rotate(-90,140.000000,20.548610)\">473</text>\n",
       "</svg>\n",
       "        </td>\n",
       "    </tr>\n",
       "</table></div></li><li class='xr-var-item'><div class='xr-var-name'><span>t02</span></div><div class='xr-var-dims'>(point, time)</div><div class='xr-var-dtype'>float32</div><div class='xr-var-preview xr-preview'>dask.array&lt;chunksize=(1, 2904), meta=np.ndarray&gt;</div><input id='attrs-3f61c775-c73c-4e04-beb5-f0a80cf9bfbe' class='xr-var-attrs-in' type='checkbox' ><label for='attrs-3f61c775-c73c-4e04-beb5-f0a80cf9bfbe' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-d88e1d81-3257-45e1-8b6c-8694b1a589ed' class='xr-var-data-in' type='checkbox'><label for='data-d88e1d81-3257-45e1-8b6c-8694b1a589ed' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'><dt><span>long_name :</span></dt><dd>mean period T02</dd><dt><span>standard_name :</span></dt><dd>sea_surface_wind_wave_mean_period_from_variance_spectral_density_second_frequency_moment</dd><dt><span>globwave_name :</span></dt><dd>mean_period_t02</dd><dt><span>units :</span></dt><dd>s</dd><dt><span>valid_min :</span></dt><dd>0</dd><dt><span>valid_max :</span></dt><dd>5000</dd></dl></div><div class='xr-var-data'><table>\n",
       "    <tr>\n",
       "        <td>\n",
       "            <table style=\"border-collapse: collapse;\">\n",
       "                <thead>\n",
       "                    <tr>\n",
       "                        <td> </td>\n",
       "                        <th> Array </th>\n",
       "                        <th> Chunk </th>\n",
       "                    </tr>\n",
       "                </thead>\n",
       "                <tbody>\n",
       "                    \n",
       "                    <tr>\n",
       "                        <th> Bytes </th>\n",
       "                        <td> 5.24 MiB </td>\n",
       "                        <td> 11.34 kiB </td>\n",
       "                    </tr>\n",
       "                    \n",
       "                    <tr>\n",
       "                        <th> Shape </th>\n",
       "                        <td> (473, 2904) </td>\n",
       "                        <td> (1, 2904) </td>\n",
       "                    </tr>\n",
       "                    <tr>\n",
       "                        <th> Dask graph </th>\n",
       "                        <td colspan=\"2\"> 473 chunks in 1420 graph layers </td>\n",
       "                    </tr>\n",
       "                    <tr>\n",
       "                        <th> Data type </th>\n",
       "                        <td colspan=\"2\"> float32 numpy.ndarray </td>\n",
       "                    </tr>\n",
       "                </tbody>\n",
       "            </table>\n",
       "        </td>\n",
       "        <td>\n",
       "        <svg width=\"170\" height=\"91\" style=\"stroke:rgb(0,0,0);stroke-width:1\" >\n",
       "\n",
       "  <!-- Horizontal lines -->\n",
       "  <line x1=\"0\" y1=\"0\" x2=\"120\" y2=\"0\" style=\"stroke-width:2\" />\n",
       "  <line x1=\"0\" y1=\"2\" x2=\"120\" y2=\"2\" />\n",
       "  <line x1=\"0\" y1=\"4\" x2=\"120\" y2=\"4\" />\n",
       "  <line x1=\"0\" y1=\"6\" x2=\"120\" y2=\"6\" />\n",
       "  <line x1=\"0\" y1=\"8\" x2=\"120\" y2=\"8\" />\n",
       "  <line x1=\"0\" y1=\"10\" x2=\"120\" y2=\"10\" />\n",
       "  <line x1=\"0\" y1=\"12\" x2=\"120\" y2=\"12\" />\n",
       "  <line x1=\"0\" y1=\"15\" x2=\"120\" y2=\"15\" />\n",
       "  <line x1=\"0\" y1=\"17\" x2=\"120\" y2=\"17\" />\n",
       "  <line x1=\"0\" y1=\"19\" x2=\"120\" y2=\"19\" />\n",
       "  <line x1=\"0\" y1=\"21\" x2=\"120\" y2=\"21\" />\n",
       "  <line x1=\"0\" y1=\"23\" x2=\"120\" y2=\"23\" />\n",
       "  <line x1=\"0\" y1=\"25\" x2=\"120\" y2=\"25\" />\n",
       "  <line x1=\"0\" y1=\"28\" x2=\"120\" y2=\"28\" />\n",
       "  <line x1=\"0\" y1=\"30\" x2=\"120\" y2=\"30\" />\n",
       "  <line x1=\"0\" y1=\"32\" x2=\"120\" y2=\"32\" />\n",
       "  <line x1=\"0\" y1=\"34\" x2=\"120\" y2=\"34\" />\n",
       "  <line x1=\"0\" y1=\"36\" x2=\"120\" y2=\"36\" />\n",
       "  <line x1=\"0\" y1=\"38\" x2=\"120\" y2=\"38\" />\n",
       "  <line x1=\"0\" y1=\"41\" x2=\"120\" y2=\"41\" style=\"stroke-width:2\" />\n",
       "\n",
       "  <!-- Vertical lines -->\n",
       "  <line x1=\"0\" y1=\"0\" x2=\"0\" y2=\"41\" style=\"stroke-width:2\" />\n",
       "  <line x1=\"120\" y1=\"0\" x2=\"120\" y2=\"41\" style=\"stroke-width:2\" />\n",
       "\n",
       "  <!-- Colored Rectangle -->\n",
       "  <polygon points=\"0.0,0.0 120.0,0.0 120.0,41.09722082588334 0.0,41.09722082588334\" style=\"fill:#8B4903A0;stroke-width:0\"/>\n",
       "\n",
       "  <!-- Text -->\n",
       "  <text x=\"60.000000\" y=\"61.097221\" font-size=\"1.0rem\" font-weight=\"100\" text-anchor=\"middle\" >2904</text>\n",
       "  <text x=\"140.000000\" y=\"20.548610\" font-size=\"1.0rem\" font-weight=\"100\" text-anchor=\"middle\" transform=\"rotate(-90,140.000000,20.548610)\">473</text>\n",
       "</svg>\n",
       "        </td>\n",
       "    </tr>\n",
       "</table></div></li><li class='xr-var-item'><div class='xr-var-name'><span>fp</span></div><div class='xr-var-dims'>(point, time)</div><div class='xr-var-dtype'>float32</div><div class='xr-var-preview xr-preview'>dask.array&lt;chunksize=(1, 2904), meta=np.ndarray&gt;</div><input id='attrs-a6594483-af19-41fa-9caf-9e4299c51140' class='xr-var-attrs-in' type='checkbox' ><label for='attrs-a6594483-af19-41fa-9caf-9e4299c51140' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-b0725490-bad3-47b9-8082-e3bd41abc22e' class='xr-var-data-in' type='checkbox'><label for='data-b0725490-bad3-47b9-8082-e3bd41abc22e' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'><dt><span>long_name :</span></dt><dd>wave peak frequency</dd><dt><span>standard_name :</span></dt><dd>sea_surface_wave_peak_frequency</dd><dt><span>globwave_name :</span></dt><dd>dominant_wave_frequency</dd><dt><span>units :</span></dt><dd>s-1</dd><dt><span>valid_min :</span></dt><dd>0</dd><dt><span>valid_max :</span></dt><dd>10000</dd></dl></div><div class='xr-var-data'><table>\n",
       "    <tr>\n",
       "        <td>\n",
       "            <table style=\"border-collapse: collapse;\">\n",
       "                <thead>\n",
       "                    <tr>\n",
       "                        <td> </td>\n",
       "                        <th> Array </th>\n",
       "                        <th> Chunk </th>\n",
       "                    </tr>\n",
       "                </thead>\n",
       "                <tbody>\n",
       "                    \n",
       "                    <tr>\n",
       "                        <th> Bytes </th>\n",
       "                        <td> 5.24 MiB </td>\n",
       "                        <td> 11.34 kiB </td>\n",
       "                    </tr>\n",
       "                    \n",
       "                    <tr>\n",
       "                        <th> Shape </th>\n",
       "                        <td> (473, 2904) </td>\n",
       "                        <td> (1, 2904) </td>\n",
       "                    </tr>\n",
       "                    <tr>\n",
       "                        <th> Dask graph </th>\n",
       "                        <td colspan=\"2\"> 473 chunks in 1420 graph layers </td>\n",
       "                    </tr>\n",
       "                    <tr>\n",
       "                        <th> Data type </th>\n",
       "                        <td colspan=\"2\"> float32 numpy.ndarray </td>\n",
       "                    </tr>\n",
       "                </tbody>\n",
       "            </table>\n",
       "        </td>\n",
       "        <td>\n",
       "        <svg width=\"170\" height=\"91\" style=\"stroke:rgb(0,0,0);stroke-width:1\" >\n",
       "\n",
       "  <!-- Horizontal lines -->\n",
       "  <line x1=\"0\" y1=\"0\" x2=\"120\" y2=\"0\" style=\"stroke-width:2\" />\n",
       "  <line x1=\"0\" y1=\"2\" x2=\"120\" y2=\"2\" />\n",
       "  <line x1=\"0\" y1=\"4\" x2=\"120\" y2=\"4\" />\n",
       "  <line x1=\"0\" y1=\"6\" x2=\"120\" y2=\"6\" />\n",
       "  <line x1=\"0\" y1=\"8\" x2=\"120\" y2=\"8\" />\n",
       "  <line x1=\"0\" y1=\"10\" x2=\"120\" y2=\"10\" />\n",
       "  <line x1=\"0\" y1=\"12\" x2=\"120\" y2=\"12\" />\n",
       "  <line x1=\"0\" y1=\"15\" x2=\"120\" y2=\"15\" />\n",
       "  <line x1=\"0\" y1=\"17\" x2=\"120\" y2=\"17\" />\n",
       "  <line x1=\"0\" y1=\"19\" x2=\"120\" y2=\"19\" />\n",
       "  <line x1=\"0\" y1=\"21\" x2=\"120\" y2=\"21\" />\n",
       "  <line x1=\"0\" y1=\"23\" x2=\"120\" y2=\"23\" />\n",
       "  <line x1=\"0\" y1=\"25\" x2=\"120\" y2=\"25\" />\n",
       "  <line x1=\"0\" y1=\"28\" x2=\"120\" y2=\"28\" />\n",
       "  <line x1=\"0\" y1=\"30\" x2=\"120\" y2=\"30\" />\n",
       "  <line x1=\"0\" y1=\"32\" x2=\"120\" y2=\"32\" />\n",
       "  <line x1=\"0\" y1=\"34\" x2=\"120\" y2=\"34\" />\n",
       "  <line x1=\"0\" y1=\"36\" x2=\"120\" y2=\"36\" />\n",
       "  <line x1=\"0\" y1=\"38\" x2=\"120\" y2=\"38\" />\n",
       "  <line x1=\"0\" y1=\"41\" x2=\"120\" y2=\"41\" style=\"stroke-width:2\" />\n",
       "\n",
       "  <!-- Vertical lines -->\n",
       "  <line x1=\"0\" y1=\"0\" x2=\"0\" y2=\"41\" style=\"stroke-width:2\" />\n",
       "  <line x1=\"120\" y1=\"0\" x2=\"120\" y2=\"41\" style=\"stroke-width:2\" />\n",
       "\n",
       "  <!-- Colored Rectangle -->\n",
       "  <polygon points=\"0.0,0.0 120.0,0.0 120.0,41.09722082588334 0.0,41.09722082588334\" style=\"fill:#8B4903A0;stroke-width:0\"/>\n",
       "\n",
       "  <!-- Text -->\n",
       "  <text x=\"60.000000\" y=\"61.097221\" font-size=\"1.0rem\" font-weight=\"100\" text-anchor=\"middle\" >2904</text>\n",
       "  <text x=\"140.000000\" y=\"20.548610\" font-size=\"1.0rem\" font-weight=\"100\" text-anchor=\"middle\" transform=\"rotate(-90,140.000000,20.548610)\">473</text>\n",
       "</svg>\n",
       "        </td>\n",
       "    </tr>\n",
       "</table></div></li><li class='xr-var-item'><div class='xr-var-name'><span>dir</span></div><div class='xr-var-dims'>(point, time)</div><div class='xr-var-dtype'>float32</div><div class='xr-var-preview xr-preview'>dask.array&lt;chunksize=(1, 2904), meta=np.ndarray&gt;</div><input id='attrs-6ae404c2-fb65-4d9a-b37b-a4511c303ba9' class='xr-var-attrs-in' type='checkbox' ><label for='attrs-6ae404c2-fb65-4d9a-b37b-a4511c303ba9' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-4fb47ec5-bc7b-40a3-8281-7a49b868c5b8' class='xr-var-data-in' type='checkbox'><label for='data-4fb47ec5-bc7b-40a3-8281-7a49b868c5b8' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'><dt><span>long_name :</span></dt><dd>wave mean direction</dd><dt><span>standard_name :</span></dt><dd>sea_surface_wave_from_direction</dd><dt><span>globwave_name :</span></dt><dd>wave_from_direction</dd><dt><span>units :</span></dt><dd>degree</dd><dt><span>valid_min :</span></dt><dd>0</dd><dt><span>valid_max :</span></dt><dd>3600</dd></dl></div><div class='xr-var-data'><table>\n",
       "    <tr>\n",
       "        <td>\n",
       "            <table style=\"border-collapse: collapse;\">\n",
       "                <thead>\n",
       "                    <tr>\n",
       "                        <td> </td>\n",
       "                        <th> Array </th>\n",
       "                        <th> Chunk </th>\n",
       "                    </tr>\n",
       "                </thead>\n",
       "                <tbody>\n",
       "                    \n",
       "                    <tr>\n",
       "                        <th> Bytes </th>\n",
       "                        <td> 5.24 MiB </td>\n",
       "                        <td> 11.34 kiB </td>\n",
       "                    </tr>\n",
       "                    \n",
       "                    <tr>\n",
       "                        <th> Shape </th>\n",
       "                        <td> (473, 2904) </td>\n",
       "                        <td> (1, 2904) </td>\n",
       "                    </tr>\n",
       "                    <tr>\n",
       "                        <th> Dask graph </th>\n",
       "                        <td colspan=\"2\"> 473 chunks in 1420 graph layers </td>\n",
       "                    </tr>\n",
       "                    <tr>\n",
       "                        <th> Data type </th>\n",
       "                        <td colspan=\"2\"> float32 numpy.ndarray </td>\n",
       "                    </tr>\n",
       "                </tbody>\n",
       "            </table>\n",
       "        </td>\n",
       "        <td>\n",
       "        <svg width=\"170\" height=\"91\" style=\"stroke:rgb(0,0,0);stroke-width:1\" >\n",
       "\n",
       "  <!-- Horizontal lines -->\n",
       "  <line x1=\"0\" y1=\"0\" x2=\"120\" y2=\"0\" style=\"stroke-width:2\" />\n",
       "  <line x1=\"0\" y1=\"2\" x2=\"120\" y2=\"2\" />\n",
       "  <line x1=\"0\" y1=\"4\" x2=\"120\" y2=\"4\" />\n",
       "  <line x1=\"0\" y1=\"6\" x2=\"120\" y2=\"6\" />\n",
       "  <line x1=\"0\" y1=\"8\" x2=\"120\" y2=\"8\" />\n",
       "  <line x1=\"0\" y1=\"10\" x2=\"120\" y2=\"10\" />\n",
       "  <line x1=\"0\" y1=\"12\" x2=\"120\" y2=\"12\" />\n",
       "  <line x1=\"0\" y1=\"15\" x2=\"120\" y2=\"15\" />\n",
       "  <line x1=\"0\" y1=\"17\" x2=\"120\" y2=\"17\" />\n",
       "  <line x1=\"0\" y1=\"19\" x2=\"120\" y2=\"19\" />\n",
       "  <line x1=\"0\" y1=\"21\" x2=\"120\" y2=\"21\" />\n",
       "  <line x1=\"0\" y1=\"23\" x2=\"120\" y2=\"23\" />\n",
       "  <line x1=\"0\" y1=\"25\" x2=\"120\" y2=\"25\" />\n",
       "  <line x1=\"0\" y1=\"28\" x2=\"120\" y2=\"28\" />\n",
       "  <line x1=\"0\" y1=\"30\" x2=\"120\" y2=\"30\" />\n",
       "  <line x1=\"0\" y1=\"32\" x2=\"120\" y2=\"32\" />\n",
       "  <line x1=\"0\" y1=\"34\" x2=\"120\" y2=\"34\" />\n",
       "  <line x1=\"0\" y1=\"36\" x2=\"120\" y2=\"36\" />\n",
       "  <line x1=\"0\" y1=\"38\" x2=\"120\" y2=\"38\" />\n",
       "  <line x1=\"0\" y1=\"41\" x2=\"120\" y2=\"41\" style=\"stroke-width:2\" />\n",
       "\n",
       "  <!-- Vertical lines -->\n",
       "  <line x1=\"0\" y1=\"0\" x2=\"0\" y2=\"41\" style=\"stroke-width:2\" />\n",
       "  <line x1=\"120\" y1=\"0\" x2=\"120\" y2=\"41\" style=\"stroke-width:2\" />\n",
       "\n",
       "  <!-- Colored Rectangle -->\n",
       "  <polygon points=\"0.0,0.0 120.0,0.0 120.0,41.09722082588334 0.0,41.09722082588334\" style=\"fill:#8B4903A0;stroke-width:0\"/>\n",
       "\n",
       "  <!-- Text -->\n",
       "  <text x=\"60.000000\" y=\"61.097221\" font-size=\"1.0rem\" font-weight=\"100\" text-anchor=\"middle\" >2904</text>\n",
       "  <text x=\"140.000000\" y=\"20.548610\" font-size=\"1.0rem\" font-weight=\"100\" text-anchor=\"middle\" transform=\"rotate(-90,140.000000,20.548610)\">473</text>\n",
       "</svg>\n",
       "        </td>\n",
       "    </tr>\n",
       "</table></div></li><li class='xr-var-item'><div class='xr-var-name'><span>dp</span></div><div class='xr-var-dims'>(point, time)</div><div class='xr-var-dtype'>float32</div><div class='xr-var-preview xr-preview'>dask.array&lt;chunksize=(1, 2904), meta=np.ndarray&gt;</div><input id='attrs-13edcf0e-df4d-4861-a263-36f0db2f4e88' class='xr-var-attrs-in' type='checkbox' ><label for='attrs-13edcf0e-df4d-4861-a263-36f0db2f4e88' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-c315cdab-0eec-4fa3-afbc-95975548c815' class='xr-var-data-in' type='checkbox'><label for='data-c315cdab-0eec-4fa3-afbc-95975548c815' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'><dt><span>long_name :</span></dt><dd>peak direction</dd><dt><span>standard_name :</span></dt><dd>sea_surface_wave_peak_direction</dd><dt><span>globwave_name :</span></dt><dd>dominant_wave_direction</dd><dt><span>units :</span></dt><dd>degree</dd><dt><span>valid_min :</span></dt><dd>0</dd><dt><span>valid_max :</span></dt><dd>360</dd></dl></div><div class='xr-var-data'><table>\n",
       "    <tr>\n",
       "        <td>\n",
       "            <table style=\"border-collapse: collapse;\">\n",
       "                <thead>\n",
       "                    <tr>\n",
       "                        <td> </td>\n",
       "                        <th> Array </th>\n",
       "                        <th> Chunk </th>\n",
       "                    </tr>\n",
       "                </thead>\n",
       "                <tbody>\n",
       "                    \n",
       "                    <tr>\n",
       "                        <th> Bytes </th>\n",
       "                        <td> 5.24 MiB </td>\n",
       "                        <td> 11.34 kiB </td>\n",
       "                    </tr>\n",
       "                    \n",
       "                    <tr>\n",
       "                        <th> Shape </th>\n",
       "                        <td> (473, 2904) </td>\n",
       "                        <td> (1, 2904) </td>\n",
       "                    </tr>\n",
       "                    <tr>\n",
       "                        <th> Dask graph </th>\n",
       "                        <td colspan=\"2\"> 473 chunks in 1420 graph layers </td>\n",
       "                    </tr>\n",
       "                    <tr>\n",
       "                        <th> Data type </th>\n",
       "                        <td colspan=\"2\"> float32 numpy.ndarray </td>\n",
       "                    </tr>\n",
       "                </tbody>\n",
       "            </table>\n",
       "        </td>\n",
       "        <td>\n",
       "        <svg width=\"170\" height=\"91\" style=\"stroke:rgb(0,0,0);stroke-width:1\" >\n",
       "\n",
       "  <!-- Horizontal lines -->\n",
       "  <line x1=\"0\" y1=\"0\" x2=\"120\" y2=\"0\" style=\"stroke-width:2\" />\n",
       "  <line x1=\"0\" y1=\"2\" x2=\"120\" y2=\"2\" />\n",
       "  <line x1=\"0\" y1=\"4\" x2=\"120\" y2=\"4\" />\n",
       "  <line x1=\"0\" y1=\"6\" x2=\"120\" y2=\"6\" />\n",
       "  <line x1=\"0\" y1=\"8\" x2=\"120\" y2=\"8\" />\n",
       "  <line x1=\"0\" y1=\"10\" x2=\"120\" y2=\"10\" />\n",
       "  <line x1=\"0\" y1=\"12\" x2=\"120\" y2=\"12\" />\n",
       "  <line x1=\"0\" y1=\"15\" x2=\"120\" y2=\"15\" />\n",
       "  <line x1=\"0\" y1=\"17\" x2=\"120\" y2=\"17\" />\n",
       "  <line x1=\"0\" y1=\"19\" x2=\"120\" y2=\"19\" />\n",
       "  <line x1=\"0\" y1=\"21\" x2=\"120\" y2=\"21\" />\n",
       "  <line x1=\"0\" y1=\"23\" x2=\"120\" y2=\"23\" />\n",
       "  <line x1=\"0\" y1=\"25\" x2=\"120\" y2=\"25\" />\n",
       "  <line x1=\"0\" y1=\"28\" x2=\"120\" y2=\"28\" />\n",
       "  <line x1=\"0\" y1=\"30\" x2=\"120\" y2=\"30\" />\n",
       "  <line x1=\"0\" y1=\"32\" x2=\"120\" y2=\"32\" />\n",
       "  <line x1=\"0\" y1=\"34\" x2=\"120\" y2=\"34\" />\n",
       "  <line x1=\"0\" y1=\"36\" x2=\"120\" y2=\"36\" />\n",
       "  <line x1=\"0\" y1=\"38\" x2=\"120\" y2=\"38\" />\n",
       "  <line x1=\"0\" y1=\"41\" x2=\"120\" y2=\"41\" style=\"stroke-width:2\" />\n",
       "\n",
       "  <!-- Vertical lines -->\n",
       "  <line x1=\"0\" y1=\"0\" x2=\"0\" y2=\"41\" style=\"stroke-width:2\" />\n",
       "  <line x1=\"120\" y1=\"0\" x2=\"120\" y2=\"41\" style=\"stroke-width:2\" />\n",
       "\n",
       "  <!-- Colored Rectangle -->\n",
       "  <polygon points=\"0.0,0.0 120.0,0.0 120.0,41.09722082588334 0.0,41.09722082588334\" style=\"fill:#8B4903A0;stroke-width:0\"/>\n",
       "\n",
       "  <!-- Text -->\n",
       "  <text x=\"60.000000\" y=\"61.097221\" font-size=\"1.0rem\" font-weight=\"100\" text-anchor=\"middle\" >2904</text>\n",
       "  <text x=\"140.000000\" y=\"20.548610\" font-size=\"1.0rem\" font-weight=\"100\" text-anchor=\"middle\" transform=\"rotate(-90,140.000000,20.548610)\">473</text>\n",
       "</svg>\n",
       "        </td>\n",
       "    </tr>\n",
       "</table></div></li><li class='xr-var-item'><div class='xr-var-name'><span>cge</span></div><div class='xr-var-dims'>(point, time)</div><div class='xr-var-dtype'>float32</div><div class='xr-var-preview xr-preview'>dask.array&lt;chunksize=(1, 2904), meta=np.ndarray&gt;</div><input id='attrs-9c4c34ac-cbf4-4405-80e9-37d9ee4850a3' class='xr-var-attrs-in' type='checkbox' ><label for='attrs-9c4c34ac-cbf4-4405-80e9-37d9ee4850a3' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-53f19068-4939-4986-8bb9-e95558537e62' class='xr-var-data-in' type='checkbox'><label for='data-53f19068-4939-4986-8bb9-e95558537e62' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'><dt><span>long_name :</span></dt><dd>wave energy flux</dd><dt><span>standard_name :</span></dt><dd>sea_surface_wind_wave_energy_flux</dd><dt><span>globwave_name :</span></dt><dd>wave_energy_flux</dd><dt><span>units :</span></dt><dd>kW m-1</dd><dt><span>valid_min :</span></dt><dd>0</dd><dt><span>valid_max :</span></dt><dd>9990</dd></dl></div><div class='xr-var-data'><table>\n",
       "    <tr>\n",
       "        <td>\n",
       "            <table style=\"border-collapse: collapse;\">\n",
       "                <thead>\n",
       "                    <tr>\n",
       "                        <td> </td>\n",
       "                        <th> Array </th>\n",
       "                        <th> Chunk </th>\n",
       "                    </tr>\n",
       "                </thead>\n",
       "                <tbody>\n",
       "                    \n",
       "                    <tr>\n",
       "                        <th> Bytes </th>\n",
       "                        <td> 5.24 MiB </td>\n",
       "                        <td> 11.34 kiB </td>\n",
       "                    </tr>\n",
       "                    \n",
       "                    <tr>\n",
       "                        <th> Shape </th>\n",
       "                        <td> (473, 2904) </td>\n",
       "                        <td> (1, 2904) </td>\n",
       "                    </tr>\n",
       "                    <tr>\n",
       "                        <th> Dask graph </th>\n",
       "                        <td colspan=\"2\"> 473 chunks in 1420 graph layers </td>\n",
       "                    </tr>\n",
       "                    <tr>\n",
       "                        <th> Data type </th>\n",
       "                        <td colspan=\"2\"> float32 numpy.ndarray </td>\n",
       "                    </tr>\n",
       "                </tbody>\n",
       "            </table>\n",
       "        </td>\n",
       "        <td>\n",
       "        <svg width=\"170\" height=\"91\" style=\"stroke:rgb(0,0,0);stroke-width:1\" >\n",
       "\n",
       "  <!-- Horizontal lines -->\n",
       "  <line x1=\"0\" y1=\"0\" x2=\"120\" y2=\"0\" style=\"stroke-width:2\" />\n",
       "  <line x1=\"0\" y1=\"2\" x2=\"120\" y2=\"2\" />\n",
       "  <line x1=\"0\" y1=\"4\" x2=\"120\" y2=\"4\" />\n",
       "  <line x1=\"0\" y1=\"6\" x2=\"120\" y2=\"6\" />\n",
       "  <line x1=\"0\" y1=\"8\" x2=\"120\" y2=\"8\" />\n",
       "  <line x1=\"0\" y1=\"10\" x2=\"120\" y2=\"10\" />\n",
       "  <line x1=\"0\" y1=\"12\" x2=\"120\" y2=\"12\" />\n",
       "  <line x1=\"0\" y1=\"15\" x2=\"120\" y2=\"15\" />\n",
       "  <line x1=\"0\" y1=\"17\" x2=\"120\" y2=\"17\" />\n",
       "  <line x1=\"0\" y1=\"19\" x2=\"120\" y2=\"19\" />\n",
       "  <line x1=\"0\" y1=\"21\" x2=\"120\" y2=\"21\" />\n",
       "  <line x1=\"0\" y1=\"23\" x2=\"120\" y2=\"23\" />\n",
       "  <line x1=\"0\" y1=\"25\" x2=\"120\" y2=\"25\" />\n",
       "  <line x1=\"0\" y1=\"28\" x2=\"120\" y2=\"28\" />\n",
       "  <line x1=\"0\" y1=\"30\" x2=\"120\" y2=\"30\" />\n",
       "  <line x1=\"0\" y1=\"32\" x2=\"120\" y2=\"32\" />\n",
       "  <line x1=\"0\" y1=\"34\" x2=\"120\" y2=\"34\" />\n",
       "  <line x1=\"0\" y1=\"36\" x2=\"120\" y2=\"36\" />\n",
       "  <line x1=\"0\" y1=\"38\" x2=\"120\" y2=\"38\" />\n",
       "  <line x1=\"0\" y1=\"41\" x2=\"120\" y2=\"41\" style=\"stroke-width:2\" />\n",
       "\n",
       "  <!-- Vertical lines -->\n",
       "  <line x1=\"0\" y1=\"0\" x2=\"0\" y2=\"41\" style=\"stroke-width:2\" />\n",
       "  <line x1=\"120\" y1=\"0\" x2=\"120\" y2=\"41\" style=\"stroke-width:2\" />\n",
       "\n",
       "  <!-- Colored Rectangle -->\n",
       "  <polygon points=\"0.0,0.0 120.0,0.0 120.0,41.09722082588334 0.0,41.09722082588334\" style=\"fill:#8B4903A0;stroke-width:0\"/>\n",
       "\n",
       "  <!-- Text -->\n",
       "  <text x=\"60.000000\" y=\"61.097221\" font-size=\"1.0rem\" font-weight=\"100\" text-anchor=\"middle\" >2904</text>\n",
       "  <text x=\"140.000000\" y=\"20.548610\" font-size=\"1.0rem\" font-weight=\"100\" text-anchor=\"middle\" transform=\"rotate(-90,140.000000,20.548610)\">473</text>\n",
       "</svg>\n",
       "        </td>\n",
       "    </tr>\n",
       "</table></div></li></ul></div></li><li class='xr-section-item'><input id='section-9591080e-b764-40a6-8773-13a6bf369238' class='xr-section-summary-in' type='checkbox'  ><label for='section-9591080e-b764-40a6-8773-13a6bf369238' class='xr-section-summary' >Indexes: <span>(1)</span></label><div class='xr-section-inline-details'></div><div class='xr-section-details'><ul class='xr-var-list'><li class='xr-var-item'><div class='xr-index-name'><div>time</div></div><div class='xr-index-preview'>PandasIndex</div><input type='checkbox' disabled/><label></label><input id='index-73a6125e-c96d-44f1-bd9d-df19e31ec2c2' class='xr-index-data-in' type='checkbox'/><label for='index-73a6125e-c96d-44f1-bd9d-df19e31ec2c2' title='Show/Hide index repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-index-data'><pre>PandasIndex(DatetimeIndex([          &#x27;2024-12-01 00:00:00&#x27;,\n",
       "               &#x27;2024-12-01 00:59:59.999986560&#x27;,\n",
       "               &#x27;2024-12-01 02:00:00.000013440&#x27;,\n",
       "                         &#x27;2024-12-01 03:00:00&#x27;,\n",
       "               &#x27;2024-12-01 03:59:59.999986560&#x27;,\n",
       "               &#x27;2024-12-01 05:00:00.000013440&#x27;,\n",
       "                         &#x27;2024-12-01 06:00:00&#x27;,\n",
       "               &#x27;2024-12-01 06:59:59.999986560&#x27;,\n",
       "               &#x27;2024-12-01 08:00:00.000013440&#x27;,\n",
       "                         &#x27;2024-12-01 09:00:00&#x27;,\n",
       "               ...\n",
       "               &#x27;2025-03-31 14:00:00.000013440&#x27;,\n",
       "                         &#x27;2025-03-31 15:00:00&#x27;,\n",
       "               &#x27;2025-03-31 15:59:59.999986560&#x27;,\n",
       "               &#x27;2025-03-31 17:00:00.000013440&#x27;,\n",
       "                         &#x27;2025-03-31 18:00:00&#x27;,\n",
       "               &#x27;2025-03-31 18:59:59.999986560&#x27;,\n",
       "               &#x27;2025-03-31 20:00:00.000013440&#x27;,\n",
       "                         &#x27;2025-03-31 21:00:00&#x27;,\n",
       "               &#x27;2025-03-31 21:59:59.999986560&#x27;,\n",
       "               &#x27;2025-03-31 23:00:00.000013440&#x27;],\n",
       "              dtype=&#x27;datetime64[ns]&#x27;, name=&#x27;time&#x27;, length=2904, freq=None))</pre></div></li></ul></div></li><li class='xr-section-item'><input id='section-3aaaea6a-3151-410e-a963-16186c445d36' class='xr-section-summary-in' type='checkbox'  ><label for='section-3aaaea6a-3151-410e-a963-16186c445d36' class='xr-section-summary' >Attributes: <span>(17)</span></label><div class='xr-section-inline-details'></div><div class='xr-section-details'><dl class='xr-attrs'><dt><span>WAVEWATCH_III_version_number :</span></dt><dd>4.18b</dd><dt><span>WAVEWATCH_III_switches :</span></dt><dd>F90 NOGRB LRB4 DIST MPI NOPA UQ PR3 IC0 REF0 FLX0 LN1 ST4 NL1 BT1 DB1 MLIM TR0 BS0 XX0 WNX1 WNT1 CRX1 CRT1 O0 O1 O2 O3 O4 O5 O6 O7 O11 O14 NC4</dd><dt><span>SIN4 namelist parameter BETAMAX :</span></dt><dd>1.33</dd><dt><span>SDS4 namelist parameter WHITECAPWIDTH :</span></dt><dd>0.3</dd><dt><span>product_name :</span></dt><dd>ww3.aus_4m.202412.nc</dd><dt><span>area :</span></dt><dd>4 min Australian grid</dd><dt><span>latitude_resolution :</span></dt><dd>   0.0666667</dd><dt><span>longitude_resolution :</span></dt><dd>   0.0666667</dd><dt><span>southernmost_latitude :</span></dt><dd>-50.0000000</dd><dt><span>northernmost_latitude :</span></dt><dd>3.0000038</dd><dt><span>westernmost_longitude :</span></dt><dd>100.0000000</dd><dt><span>easternmost_longitude :</span></dt><dd>175.0000000</dd><dt><span>minimum_altitude :</span></dt><dd>-12000 m</dd><dt><span>maximum_altitude :</span></dt><dd>9000 m</dd><dt><span>altitude_resolution :</span></dt><dd>n/a</dd><dt><span>start_date :</span></dt><dd>2024-12-01T00:00:00Z</dd><dt><span>stop_date :</span></dt><dd>2024-12-31T23:00:00Z</dd></dl></div></li></ul></div></div>"
      ],
      "text/plain": [
       "<xarray.Dataset> Size: 33MB\n",
       "Dimensions:    (point: 473, time: 2904)\n",
       "Coordinates:\n",
       "    longitude  (point) float32 2kB 151.6 151.7 151.7 151.8 ... 152.0 152.1 152.1\n",
       "    latitude   (point) float32 2kB -24.0 -24.0 -24.0 ... -22.47 -22.47 -22.47\n",
       "  * time       (time) datetime64[ns] 23kB 2024-12-01 ... 2025-03-31T23:00:00....\n",
       "Dimensions without coordinates: point\n",
       "Data variables:\n",
       "    hs         (point, time) float32 5MB dask.array<chunksize=(1, 2904), meta=np.ndarray>\n",
       "    t02        (point, time) float32 5MB dask.array<chunksize=(1, 2904), meta=np.ndarray>\n",
       "    fp         (point, time) float32 5MB dask.array<chunksize=(1, 2904), meta=np.ndarray>\n",
       "    dir        (point, time) float32 5MB dask.array<chunksize=(1, 2904), meta=np.ndarray>\n",
       "    dp         (point, time) float32 5MB dask.array<chunksize=(1, 2904), meta=np.ndarray>\n",
       "    cge        (point, time) float32 5MB dask.array<chunksize=(1, 2904), meta=np.ndarray>\n",
       "Attributes: (12/17)\n",
       "    WAVEWATCH_III_version_number:           4.18b\n",
       "    WAVEWATCH_III_switches:                 F90 NOGRB LRB4 DIST MPI NOPA UQ P...\n",
       "    SIN4 namelist parameter BETAMAX:        1.33\n",
       "    SDS4 namelist parameter WHITECAPWIDTH:  0.3\n",
       "    product_name:                           ww3.aus_4m.202412.nc\n",
       "    area:                                   4 min Australian grid\n",
       "    ...                                     ...\n",
       "    easternmost_longitude:                  175.0000000\n",
       "    minimum_altitude:                       -12000 m\n",
       "    maximum_altitude:                       9000 m\n",
       "    altitude_resolution:                    n/a\n",
       "    start_date:                             2024-12-01T00:00:00Z\n",
       "    stop_date:                              2024-12-31T23:00:00Z"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Load and merge all NetCDF hindcast files into one dataset\n",
    "bad_file = \"waves_point_465809.0_lon151.400_lat-22.467_all_months.nc\"\n",
    "folder = \"wave_hindcast_point\"\n",
    "\n",
    "good_files = [\n",
    "    os.path.join(folder, f)\n",
    "    for f in os.listdir(folder)\n",
    "    if f.endswith(\".nc\") and f != bad_file\n",
    "]\n",
    "\n",
    "print(f\"Good files found: {len(good_files)}\")\n",
    "\n",
    "wave = xr.open_mfdataset(\n",
    "    good_files,\n",
    "    combine=\"nested\",\n",
    "    concat_dim=\"point\",\n",
    "    chunks=\"auto\",\n",
    "    engine=\"netcdf4\",\n",
    "    parallel=False\n",
    ")\n",
    "\n",
    "wave"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bb58b6b9-28fe-4a12-a26d-bfbf784b35a7",
   "metadata": {},
   "source": [
    "# Open wind files "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "b924553e-8117-4751-ae32-af77fb3b4442",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<xarray.Dataset> Size: 11MB\n",
      "Dimensions:     (valid_time: 236, latitude: 81, longitude: 69)\n",
      "Coordinates:\n",
      "    number      int64 8B ...\n",
      "  * valid_time  (valid_time) datetime64[ns] 2kB 2025-02-01 ... 2025-03-31T18:...\n",
      "  * latitude    (latitude) float64 648B -10.0 -10.25 -10.5 ... -29.75 -30.0\n",
      "  * longitude   (longitude) float64 552B 143.0 143.2 143.5 ... 159.5 159.8 160.0\n",
      "    expver      (valid_time) <U4 4kB ...\n",
      "Data variables:\n",
      "    u10         (valid_time, latitude, longitude) float32 5MB ...\n",
      "    v10         (valid_time, latitude, longitude) float32 5MB ...\n",
      "Attributes:\n",
      "    GRIB_centre:             ecmf\n",
      "    GRIB_centreDescription:  European Centre for Medium-Range Weather Forecasts\n",
      "    GRIB_subCentre:          0\n",
      "    Conventions:             CF-1.7\n",
      "    institution:             European Centre for Medium-Range Weather Forecasts\n",
      "    history:                 2025-09-30T00:27 GRIB to CDM+CF via cfgrib-0.9.1...\n"
     ]
    }
   ],
   "source": [
    "wind = xr.open_dataset(\".../raw_data/cds/wind_bbox.nc\", engine=\"netcdf4\")\n",
    "print(wind)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "ed7575ea-6ccd-4e0d-96c4-2d20f0f58fc8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<xarray.Dataset> Size: 77MB\n",
      "Dimensions:     (point: 473, time: 2904)\n",
      "Coordinates:\n",
      "    longitude   (point) float32 2kB 151.6 151.7 151.7 ... 152.0 152.1 152.1\n",
      "    latitude    (point) float32 2kB -24.0 -24.0 -24.0 ... -22.47 -22.47 -22.47\n",
      "  * time        (time) datetime64[ns] 23kB 2024-12-01 ... 2025-03-31T23:00:00...\n",
      "    number      int64 8B 0\n",
      "    expver      (time) <U4 46kB '0001' '0001' '0001' ... '0001' '0001' '0001'\n",
      "Dimensions without coordinates: point\n",
      "Data variables:\n",
      "    hs          (point, time) float32 5MB dask.array<chunksize=(1, 2904), meta=np.ndarray>\n",
      "    t02         (point, time) float32 5MB dask.array<chunksize=(1, 2904), meta=np.ndarray>\n",
      "    fp          (point, time) float32 5MB dask.array<chunksize=(1, 2904), meta=np.ndarray>\n",
      "    dir         (point, time) float32 5MB dask.array<chunksize=(1, 2904), meta=np.ndarray>\n",
      "    dp          (point, time) float32 5MB dask.array<chunksize=(1, 2904), meta=np.ndarray>\n",
      "    cge         (point, time) float32 5MB dask.array<chunksize=(1, 2904), meta=np.ndarray>\n",
      "    u10         (time, point) float64 11MB nan nan nan nan ... nan nan nan nan\n",
      "    v10         (time, point) float64 11MB nan nan nan nan ... nan nan nan nan\n",
      "    wind_speed  (time, point) float64 11MB nan nan nan nan ... nan nan nan nan\n",
      "    wind_dir    (time, point) float64 11MB nan nan nan nan ... nan nan nan nan\n",
      "Attributes: (12/17)\n",
      "    WAVEWATCH_III_version_number:           4.18b\n",
      "    WAVEWATCH_III_switches:                 F90 NOGRB LRB4 DIST MPI NOPA UQ P...\n",
      "    SIN4 namelist parameter BETAMAX:        1.33\n",
      "    SDS4 namelist parameter WHITECAPWIDTH:  0.3\n",
      "    product_name:                           ww3.aus_4m.202412.nc\n",
      "    area:                                   4 min Australian grid\n",
      "    ...                                     ...\n",
      "    easternmost_longitude:                  175.0000000\n",
      "    minimum_altitude:                       -12000 m\n",
      "    maximum_altitude:                       9000 m\n",
      "    altitude_resolution:                    n/a\n",
      "    start_date:                             2024-12-01T00:00:00Z\n",
      "    stop_date:                              2024-12-31T23:00:00Z\n"
     ]
    }
   ],
   "source": [
    "# Load ERA5 wind dataset\n",
    "wind = xr.open_dataset(\"raw_data/cds/wind_bbox.nc\", engine=\"netcdf4\")\n",
    "\n",
    "# Standardise coordinate names\n",
    "wind = wind.rename({\"valid_time\": \"time\"})\n",
    "\n",
    "# Compute wind speed and direction\n",
    "wind[\"wind_speed\"] = np.sqrt(wind.u10**2 + wind.v10**2)\n",
    "wind[\"wind_dir\"] = (180 + np.degrees(np.arctan2(-wind.u10, -wind.v10))) % 360\n",
    "\n",
    "# Align time format with wave data\n",
    "wind[\"time\"] = pd.to_datetime(wind.time.values)\n",
    "wave[\"time\"] = pd.to_datetime(wave.time.values)\n",
    "\n",
    "# Interpolate wind data to match wave coordinates (time, lat, lon)\n",
    "wind_interp = wind.interp(\n",
    "    latitude=wave.latitude,\n",
    "    longitude=wave.longitude,\n",
    "    time=wave.time\n",
    ")\n",
    "\n",
    "# Merge into one combined dataset\n",
    "wave_wind = xr.merge([wave, wind_interp], compat=\"override\")\n",
    "\n",
    "print(wave_wind)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4ffbd8b5-736e-4e50-a632-a1caa652f57e",
   "metadata": {},
   "source": [
    "# Set boundaries"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "2ba611a4-50e4-405a-9813-7896b8516212",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "      latitude   longitude\n",
      "0   -24.000000  151.600006\n",
      "1   -24.000000  151.667007\n",
      "2   -24.000000  151.733994\n",
      "3   -24.000000  151.800003\n",
      "4   -24.000000  151.867004\n",
      "..         ...         ...\n",
      "468 -22.466999  151.867004\n",
      "469 -22.466999  151.934006\n",
      "470 -22.466999  152.000000\n",
      "471 -22.466999  152.067001\n",
      "472 -22.466999  152.134003\n",
      "\n",
      "[473 rows x 2 columns]\n",
      "Total unique points: 473\n"
     ]
    }
   ],
   "source": [
    "# Get latitude/longitude arrays\n",
    "lats = np.round(wave.latitude.values, 3)\n",
    "lons = np.round(wave.longitude.values, 3)\n",
    "\n",
    "# Combine into one 2-column array and drop duplicates\n",
    "coords = np.unique(np.column_stack((lats, lons)), axis=0)\n",
    "\n",
    "# Build DataFrame of unique coordinate pairs\n",
    "unique_points = pd.DataFrame(coords, columns=[\"latitude\", \"longitude\"])\n",
    "print(unique_points)\n",
    "print(f\"Total unique points: {len(unique_points)}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cfa66e40-6554-4f72-8478-2874875b3138",
   "metadata": {},
   "source": [
    "# Standardise variable names"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a1b43945-6e12-40df-a80b-a4ede3164c14",
   "metadata": {},
   "source": [
    "# This method did not work"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "8dc6a7a3-d9b3-42b5-b222-5dea2c6e6075",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\anika\\AppData\\Local\\Temp\\ipykernel_20284\\4089006195.py:8: DeprecationWarning: DataFrameGroupBy.apply operated on the grouping columns. This behavior is deprecated, and in a future version of pandas the grouping columns will be excluded from the operation. Either pass `include_groups=False` to exclude the groupings or explicitly select the grouping columns after groupby to silence this warning.\n",
      "  wave_points = grouped.apply(lambda x: x.set_index(\"time\").sort_index())\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<xarray.Dataset> Size: 86MB\n",
      "Dimensions:    (latitude: 24, longitude: 31, time: 2904)\n",
      "Coordinates:\n",
      "    longitude  (latitude, longitude, time) float32 9MB nan nan nan ... nan nan\n",
      "    latitude   (latitude, longitude, time) float32 9MB nan nan nan ... nan nan\n",
      "  * time       (time) datetime64[ns] 23kB 2024-12-01 ... 2025-03-31T23:00:00....\n",
      "Data variables:\n",
      "    point      (latitude, longitude, time) float64 17MB nan nan nan ... nan nan\n",
      "    hs         (latitude, longitude, time) float32 9MB nan nan nan ... nan nan\n",
      "    t02        (latitude, longitude, time) float32 9MB nan nan nan ... nan nan\n",
      "    fp         (latitude, longitude, time) float32 9MB nan nan nan ... nan nan\n",
      "    dir        (latitude, longitude, time) float32 9MB nan nan nan ... nan nan\n",
      "    dp         (latitude, longitude, time) float32 9MB nan nan nan ... nan nan\n",
      "    cge        (latitude, longitude, time) float32 9MB nan nan nan ... nan nan\n"
     ]
    }
   ],
   "source": [
    "# Convert to DataFrame for clarity\n",
    "wave_df = wave.to_dataframe().reset_index()\n",
    "\n",
    "# Group by unique (lat, lon)\n",
    "grouped = wave_df.groupby([\"latitude\", \"longitude\"])\n",
    "\n",
    "# Convert back to an xarray with a new dimension \"point\"\n",
    "wave_points = grouped.apply(lambda x: x.set_index(\"time\").sort_index())\n",
    "wave_points = wave_points.to_xarray()\n",
    "\n",
    "print(wave_points)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "35703166-447c-4c2d-9c86-4310193e2931",
   "metadata": {},
   "source": [
    "### need to identify unique points and merge the new correct name"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "35d62050-f7c4-41a5-93b8-8626d0abf591",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Convert to DataFrame\n",
    "wave_df = wave.to_dataframe().reset_index()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "64bb1d90-6124-4ef9-bf3f-cb27aaef081d",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Round lat/lon to reduce floating-point mismatches\n",
    "wave_df[\"latitude\"] = wave_df[\"latitude\"].round(4)\n",
    "wave_df[\"longitude\"] = wave_df[\"longitude\"].round(4)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "55ac76b3-916c-4f25-b978-bd6ebd88baf4",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create unique (lat, lon) pairs and assign a point ID directly\n",
    "coords = list(zip(wave_df[\"latitude\"], wave_df[\"longitude\"]))\n",
    "coord_to_point = {coord: i for i, coord in enumerate(sorted(set(coords)))}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "981b636d-b48d-435d-b87b-e6e8e4629b0e",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Map each row’s coordinates to its corresponding point ID\n",
    "wave_df[\"point\"] = [coord_to_point[(lat, lon)] for lat, lon in zip(wave_df[\"latitude\"], wave_df[\"longitude\"])]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "36fda9e8-a4c1-491d-a256-14cf3e04f963",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Unique points: 473\n",
      "    latitude   longitude  point\n",
      "0 -23.999901  151.600296      0\n",
      "1 -23.999901  151.600296      0\n",
      "2 -23.999901  151.600296      0\n",
      "3 -23.999901  151.600296      0\n",
      "4 -23.999901  151.600296      0\n",
      "5 -23.999901  151.600296      0\n",
      "6 -23.999901  151.600296      0\n",
      "7 -23.999901  151.600296      0\n",
      "8 -23.999901  151.600296      0\n",
      "9 -23.999901  151.600296      0\n"
     ]
    }
   ],
   "source": [
    "# Verify success\n",
    "print(\"Unique points:\", len(set(wave_df[\"point\"])))\n",
    "print(wave_df[[\"latitude\", \"longitude\", \"point\"]].head(10))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "d8c09b94-8ace-4862-9ca0-ba130c72d832",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Convert back to xarray with point/time as the multi-index\n",
    "wave_points = wave_df.set_index([\"point\", \"time\"]).to_xarray()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "3bb15582-e0f8-4960-8035-8a2727827ef3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<xarray.Dataset> Size: 44MB\n",
      "Dimensions:    (point: 473, time: 2904)\n",
      "Coordinates:\n",
      "  * point      (point) int64 4kB 0 1 2 3 4 5 6 7 ... 466 467 468 469 470 471 472\n",
      "  * time       (time) datetime64[ns] 23kB 2024-12-01 ... 2025-03-31T23:00:00....\n",
      "Data variables:\n",
      "    hs         (point, time) float32 5MB 0.264 0.294 0.272 ... 1.34 1.31 1.272\n",
      "    t02        (point, time) float32 5MB 4.43 4.55 4.25 4.25 ... 4.18 4.16 4.18\n",
      "    fp         (point, time) float32 5MB 0.122 0.121 0.123 ... 0.193 0.195 0.197\n",
      "    dir        (point, time) float32 5MB 45.6 47.0 44.7 45.9 ... 356.3 4.8 13.8\n",
      "    dp         (point, time) float32 5MB 50.0 52.0 50.0 ... 330.0 333.0 336.0\n",
      "    cge        (point, time) float32 5MB 0.2 0.3 0.2 0.3 0.2 ... 5.2 4.8 4.6 4.4\n",
      "    longitude  (point, time) float32 5MB 151.6 151.6 151.6 ... 152.1 152.1 152.1\n",
      "    latitude   (point, time) float32 5MB -24.0 -24.0 -24.0 ... -22.47 -22.47\n"
     ]
    }
   ],
   "source": [
    "print(wave_points)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "70714978-a6ff-4dc2-994e-d7255f0b5e13",
   "metadata": {},
   "source": [
    "### Make Lat and Long static to combine with wind "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "f1ae56e6-ccf5-44bf-8adc-5d3c4739be66",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<xarray.Dataset> Size: 33MB\n",
      "Dimensions:  (point: 473, time: 2904)\n",
      "Coordinates:\n",
      "  * point    (point) int64 4kB 0 1 2 3 4 5 6 7 ... 466 467 468 469 470 471 472\n",
      "  * time     (time) datetime64[ns] 23kB 2024-12-01 ... 2025-03-31T23:00:00.00...\n",
      "Data variables:\n",
      "    hs       (point, time) float32 5MB 0.264 0.294 0.272 ... 1.34 1.31 1.272\n",
      "    t02      (point, time) float32 5MB 4.43 4.55 4.25 4.25 ... 4.18 4.16 4.18\n",
      "    fp       (point, time) float32 5MB 0.122 0.121 0.123 ... 0.193 0.195 0.197\n",
      "    dir      (point, time) float32 5MB 45.6 47.0 44.7 45.9 ... 356.3 4.8 13.8\n",
      "    dp       (point, time) float32 5MB 50.0 52.0 50.0 52.0 ... 330.0 333.0 336.0\n",
      "    cge      (point, time) float32 5MB 0.2 0.3 0.2 0.3 0.2 ... 5.2 4.8 4.6 4.4\n"
     ]
    }
   ],
   "source": [
    "# Extract unique lat/lon per point (first timestep)\n",
    "latitudes = wave_points.latitude.isel(time=0)\n",
    "longitudes = wave_points.longitude.isel(time=0)\n",
    "\n",
    "# Assign as 1D coordinates instead of 2D variables\n",
    "wave_points = wave_points.assign_coords({\n",
    "    \"latitude\": (\"point\", latitudes.values),\n",
    "    \"longitude\": (\"point\", longitudes.values)\n",
    "})\n",
    "\n",
    "# Remove the old 2D versions if they exist\n",
    "wave_points = wave_points.drop_vars([\"latitude\", \"longitude\"])\n",
    "\n",
    "print(wave_points)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "cf16fc11-552b-4b4d-8f6b-51a74f42987c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Cleaned ERA5 structure:\n",
      "<xarray.Dataset> Size: 21MB\n",
      "Dimensions:     (time: 236, latitude: 81, longitude: 69)\n",
      "Coordinates:\n",
      "  * time        (time) datetime64[ns] 2kB 2025-02-01 ... 2025-03-31T18:00:00\n",
      "  * latitude    (latitude) float64 648B -10.0 -10.25 -10.5 ... -29.75 -30.0\n",
      "  * longitude   (longitude) float64 552B 143.0 143.2 143.5 ... 159.5 159.8 160.0\n",
      "Data variables:\n",
      "    u10         (time, latitude, longitude) float32 5MB 6.76 6.726 ... 6.329\n",
      "    v10         (time, latitude, longitude) float32 5MB -7.531 -7.392 ... 0.4354\n",
      "    wind_speed  (time, latitude, longitude) float32 5MB 10.12 9.994 ... 6.344\n",
      "    wind_dir    (time, latitude, longitude) float32 5MB 138.1 137.7 ... 86.06\n",
      "Attributes:\n",
      "    GRIB_centre:             ecmf\n",
      "    GRIB_centreDescription:  European Centre for Medium-Range Weather Forecasts\n",
      "    GRIB_subCentre:          0\n",
      "    Conventions:             CF-1.7\n",
      "    institution:             European Centre for Medium-Range Weather Forecasts\n",
      "    history:                 2025-09-30T00:27 GRIB to CDM+CF via cfgrib-0.9.1...\n"
     ]
    }
   ],
   "source": [
    "# Reload or reuse the wind dataset\n",
    "# wind = xr.open_dataset(\"era5_wind_alfred_2025.nc\", engine=\"netcdf4\")\n",
    "\n",
    "# Flatten any non-1D coordinates\n",
    "for coord_name, coord in list(wind.coords.items()):\n",
    "    if coord.ndim > 1:\n",
    "        print(f\"Flattening non-1D coord: {coord_name}\")\n",
    "        # keep only the first value along the extra dimension\n",
    "        wind = wind.isel({coord_name: 0}) if coord_name in wind.dims else wind.drop_vars(coord_name, errors=\"ignore\")\n",
    "\n",
    "# If a MultiIndex exists (cfgrib style), reset it\n",
    "for dim in list(wind.dims):\n",
    "    if isinstance(wind[dim].values[0], (tuple, np.void)):\n",
    "        print(f\"Resetting MultiIndex for {dim}\")\n",
    "        wind = wind.reset_index(dim)\n",
    "\n",
    "# Drop unneeded cfgrib coords if they remain\n",
    "for v in [\"number\", \"expver\"]:\n",
    "    if v in wind.coords:\n",
    "        wind = wind.drop_vars(v)\n",
    "\n",
    "print(\"Cleaned ERA5 structure:\")\n",
    "print(wind)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "10369718-aafc-495f-ba72-1f53d3175739",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Re-interpolated successfully.\n",
      "<xarray.Dataset> Size: 38MB\n",
      "Dimensions:     (point: 473, time: 1416)\n",
      "Coordinates:\n",
      "    longitude   (point) float32 2kB 151.6 151.7 151.7 ... 152.0 152.1 152.1\n",
      "    latitude    (point) float32 2kB -24.0 -24.0 -24.0 ... -22.47 -22.47 -22.47\n",
      "  * time        (time) datetime64[ns] 11kB 2025-02-01 ... 2025-03-31T23:00:00...\n",
      "    number      int64 8B 0\n",
      "    expver      (time) <U4 23kB '0001' '0001' '0001' ... '0001' '0001' '0001'\n",
      "  * point       (point) int64 4kB 0 1 2 3 4 5 6 ... 466 467 468 469 470 471 472\n",
      "Data variables:\n",
      "    hs          (point, time) float32 3MB dask.array<chunksize=(1, 1416), meta=np.ndarray>\n",
      "    t02         (point, time) float32 3MB dask.array<chunksize=(1, 1416), meta=np.ndarray>\n",
      "    fp          (point, time) float32 3MB dask.array<chunksize=(1, 1416), meta=np.ndarray>\n",
      "    dir         (point, time) float32 3MB dask.array<chunksize=(1, 1416), meta=np.ndarray>\n",
      "    dp          (point, time) float32 3MB dask.array<chunksize=(1, 1416), meta=np.ndarray>\n",
      "    cge         (point, time) float32 3MB dask.array<chunksize=(1, 1416), meta=np.ndarray>\n",
      "    u10         (time, point) float64 5MB -7.036 -7.448 -7.861 ... nan nan nan\n",
      "    v10         (time, point) float64 5MB 2.976 3.339 3.701 ... nan nan nan\n",
      "    wind_speed  (time, point) float64 5MB 7.646 8.168 8.69 9.037 ... nan nan nan\n",
      "    wind_dir    (time, point) float64 5MB 292.6 293.9 295.1 ... nan nan nan\n",
      "Attributes: (12/17)\n",
      "    WAVEWATCH_III_version_number:           4.18b\n",
      "    WAVEWATCH_III_switches:                 F90 NOGRB LRB4 DIST MPI NOPA UQ P...\n",
      "    SIN4 namelist parameter BETAMAX:        1.33\n",
      "    SDS4 namelist parameter WHITECAPWIDTH:  0.3\n",
      "    product_name:                           ww3.aus_4m.202412.nc\n",
      "    area:                                   4 min Australian grid\n",
      "    ...                                     ...\n",
      "    easternmost_longitude:                  175.0000000\n",
      "    minimum_altitude:                       -12000 m\n",
      "    maximum_altitude:                       9000 m\n",
      "    altitude_resolution:                    n/a\n",
      "    start_date:                             2024-12-01T00:00:00Z\n",
      "    stop_date:                              2024-12-31T23:00:00Z\n"
     ]
    }
   ],
   "source": [
    "# Extract one lat/lon per hindcast point (1D already)\n",
    "latitudes = wave_wind.latitude\n",
    "longitudes = wave_wind.longitude\n",
    "for i in range(len(latitudes)):\n",
    "    lat = float(latitudes[i])\n",
    "    lon = float(longitudes[i])\n",
    "    try:\n",
    "        # Interpolate ERA5 data (spatially + temporally)\n",
    "        wind_point = wind.interp(\n",
    "            latitude=lat,\n",
    "            longitude=lon,\n",
    "            time=wave_wind.time,\n",
    "            method=\"nearest\"\n",
    "        )\n",
    "\n",
    "        # Add explicit point dimension\n",
    "        wind_point = wind_point.expand_dims({\"point\": [i]})\n",
    "        interp_list.append(wind_point)\n",
    "\n",
    "    except Exception as e:\n",
    "        print(f\"Skipped {lat}, {lon}: {e}\")\n",
    "\n",
    "# Combine and merge\n",
    "if interp_list:\n",
    "    wind_interp = xr.concat(interp_list, dim=\"point\")\n",
    "    wind_interp = wind_interp.assign_coords({\n",
    "        \"latitude\": (\"point\", latitudes.values),\n",
    "        \"longitude\": (\"point\", longitudes.values)\n",
    "    })\n",
    "\n",
    "    # Drop duplicate vars if present\n",
    "    drop_vars = [v for v in [\"latitude\", \"longitude\"] if v in wind_interp.variables]\n",
    "    wind_interp = wind_interp.drop_vars(drop_vars)\n",
    "\n",
    "    # Merge with wave data\n",
    "    wave_wind = xr.merge([wave_wind, wind_interp], compat=\"override\")\n",
    "\n",
    "    print(\"Re-interpolated successfully.\")\n",
    "    print(wave_wind)\n",
    "else:\n",
    "    print(\"No valid interpolated wind data.\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2cd899fe-5633-4c75-b97d-8f14550f8a13",
   "metadata": {},
   "source": [
    "# Start on time series and analysis \n",
    "### Set time"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "939a5a52-d8d6-4205-9d63-8526430e16bc",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Wave time span : 2025-02-01T00:00:00.000000000 → 2025-03-31T23:00:00.000013440\n",
      "Wind time span : 2025-02-01T00:00:00.000000000 → 2025-03-31T18:00:00.000000000\n"
     ]
    }
   ],
   "source": [
    "print(\"Wave time span :\", str(wave_wind.time.min().values), \"→\", str(wave_wind.time.max().values))\n",
    "print(\"Wind time span :\", str(wind.time.min().values), \"→\", str(wind.time.max().values))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "490b8fb0-4633-4005-acf0-b3d527aa30e1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2025-02-01T00:00:00.000000000 → 2025-03-31T23:00:00.000013440\n"
     ]
    }
   ],
   "source": [
    "# Clip the dataset to Feb–Mar 2025\n",
    "wave_wind = wave_wind.sel(time=slice(\"2025-02-01\", \"2025-03-31\"))\n",
    "print(wave_wind.time.min().values, \"→\", wave_wind.time.max().values)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8fd9f684-16b6-44f9-b930-425a9b25c581",
   "metadata": {},
   "source": [
    "### Divide the CBG equally"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "49a78b15-fdce-44e0-ae98-8535c6b7468f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Latitude boundaries: [-23.9998703  -23.48875682 -22.97764333 -22.46652985]\n"
     ]
    }
   ],
   "source": [
    "# Determine equal thirds of the latitude range\n",
    "lat_min = float(wave_wind.latitude.min())\n",
    "lat_max = float(wave_wind.latitude.max())\n",
    "lat_thirds = np.linspace(lat_min, lat_max, 4)  # three zones = 4 boundaries\n",
    "\n",
    "print(\"Latitude boundaries:\", lat_thirds)\n",
    "\n",
    "def assign_equal_region(lat):\n",
    "    if lat >= lat_thirds[2]:\n",
    "        return \"North\"\n",
    "    elif lat >= lat_thirds[1]:\n",
    "        return \"Central\"\n",
    "    else:\n",
    "        return \"South\"\n",
    "\n",
    "latitudes = wave_wind.latitude.values\n",
    "regions = [assign_equal_region(float(lat)) for lat in latitudes]\n",
    "wave_wind = wave_wind.assign_coords(region=(\"point\", regions))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f2150193-2962-4d4f-913a-eab473bdd817",
   "metadata": {},
   "source": [
    "## Load in reefs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "5c58a1c0-86c4-4904-9a40-fa554fe35159",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "            REEF_NAME   LATITUDE   LONGITUDE\n",
      "0  NORTH REEF (NORTH) -23.183333  151.908333\n",
      "1     BROOMFIELD REEF -23.275000  151.941667\n",
      "2   WRECK ISLAND REEF -23.333333  151.966667\n",
      "3       ONE TREE REEF -23.500000  152.066667\n",
      "4        FITZROY REEF -23.625000  152.158333\n",
      "Index(['REEF_NAME', 'LATITUDE', 'LONGITUDE'], dtype='object')\n"
     ]
    }
   ],
   "source": [
    "reefs = pd.read_csv(\"capricorn_bunker_reefs.csv\")\n",
    "print(reefs.head())       # show the first few rows\n",
    "print(reefs.columns)      # show the exact column names"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "0de7b388-a521-4e1b-a321-321474de61d9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 800x800 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Load reef data\n",
    "reefs = pd.read_csv(\".../raw_data/cyclone_data/capricorn_bunker_reefs.csv)\n",
    "\n",
    "# Compute latitude boundaries (equal thirds\n",
    "latitudes = wave_wind.latitude.values\n",
    "longitudes = wave_wind.longitude.values\n",
    "regions = wave_wind.region.values\n",
    "\n",
    "lat_min = np.nanmin(latitudes)\n",
    "lat_max = np.nanmax(latitudes)\n",
    "lat_bounds = np.linspace(lat_min, lat_max, 4)  # 3 equal zones = 4 boundaries\n",
    "\n",
    "# --- Plot setup ---\n",
    "colors = {\"North\": \"tab:blue\", \"Central\": \"tab:orange\", \"South\": \"tab:green\"}\n",
    "\n",
    "fig, ax = plt.subplots(figsize=(8, 8),\n",
    "                       subplot_kw={\"projection\": ccrs.PlateCarree()})\n",
    "\n",
    "# --- Base map ---\n",
    "ax.add_feature(cfeature.COASTLINE, linewidth=0.5)\n",
    "ax.add_feature(cfeature.LAND, facecolor=\"lightgrey\")\n",
    "ax.add_feature(cfeature.OCEAN, facecolor=\"lightblue\")\n",
    "ax.set_extent([150.5, 153.5, -25, -22], crs=ccrs.PlateCarree())\n",
    "\n",
    "# Plot wave points by region\n",
    "for region in [\"North\", \"Central\", \"South\"]:\n",
    "    mask = np.array(regions) == region\n",
    "    ax.scatter(np.array(longitudes)[mask],\n",
    "               np.array(latitudes)[mask],\n",
    "               color=colors[region],\n",
    "               label=region,\n",
    "               s=15,\n",
    "               transform=ccrs.PlateCarree(),\n",
    "               zorder=3)\n",
    "\n",
    "# Add dashed latitude division lines\n",
    "for bound in lat_bounds[1:-1]:\n",
    "    ax.axhline(bound, color=\"black\", linestyle=\"--\", linewidth=0.8)\n",
    "\n",
    "# Plot reef locations from CSV\n",
    "ax.scatter(reefs[\"LONGITUDE\"], reefs[\"LATITUDE\"],\n",
    "           marker=\"^\",             # triangle\n",
    "           s=60,\n",
    "           facecolor=\"cyan\",\n",
    "           edgecolor=\"black\",\n",
    "           linewidth=0.6,\n",
    "           transform=ccrs.PlateCarree(),\n",
    "           zorder=5,\n",
    "           label=\"Reefs\")\n",
    "\n",
    "# Add reef name labels\n",
    "for _, row in reefs.iterrows():\n",
    "    ax.text(row[\"LONGITUDE\"] + 0.03, row[\"LATITUDE\"] + 0.03, row[\"REEF_NAME\"],\n",
    "            fontsize=7, color=\"black\", weight=\"bold\",\n",
    "            transform=ccrs.PlateCarree(), zorder=6)\n",
    "\n",
    "# Latitude/Longitude labels\n",
    "gl = ax.gridlines(draw_labels=True, linewidth=0.4, color=\"gray\", alpha=0.5, linestyle=\"--\")\n",
    "gl.top_labels = False\n",
    "gl.right_labels = False\n",
    "gl.xlocator = mticker.FixedLocator(np.arange(150.5, 153.6, 0.5))\n",
    "gl.ylocator = mticker.FixedLocator(np.arange(-25, -21.9, 0.5))\n",
    "gl.xlabel_style = {\"size\": 8}\n",
    "gl.ylabel_style = {\"size\": 8}\n",
    "\n",
    "# Title and legend\n",
    "ax.set_title(\"Capricorn Bunker Region – Equal-Latitude Divisions with Reef Locations\",\n",
    "             fontsize=11, pad=12)\n",
    "ax.legend(loc=\"lower right\")\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0d88e6f1-0ed9-4c75-aad7-c9af9f3ecfad",
   "metadata": {},
   "source": [
    "### Mathematically transform wave data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "e329f399-6f8f-4321-b54c-4aa3411fc881",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<xarray.Dataset> Size: 272kB\n",
      "Dimensions:     (region: 3, time: 1416)\n",
      "Coordinates:\n",
      "  * time        (time) datetime64[ns] 11kB 2025-02-01 ... 2025-03-31T23:00:00...\n",
      "    number      int64 8B 0\n",
      "    expver      (time) <U4 23kB '0001' '0001' '0001' ... '0001' '0001' '0001'\n",
      "  * region      (region) object 24B 'Central' 'North' 'South'\n",
      "Data variables:\n",
      "    hs          (region, time) float32 17kB dask.array<chunksize=(1, 1416), meta=np.ndarray>\n",
      "    t02         (region, time) float32 17kB dask.array<chunksize=(1, 1416), meta=np.ndarray>\n",
      "    fp          (region, time) float32 17kB dask.array<chunksize=(1, 1416), meta=np.ndarray>\n",
      "    dir         (region, time) float32 17kB dask.array<chunksize=(1, 1416), meta=np.ndarray>\n",
      "    dp          (region, time) float32 17kB dask.array<chunksize=(1, 1416), meta=np.ndarray>\n",
      "    cge         (region, time) float32 17kB dask.array<chunksize=(1, 1416), meta=np.ndarray>\n",
      "    u10         (region, time) float64 34kB -9.375 -9.54 -9.705 ... nan nan nan\n",
      "    v10         (region, time) float64 34kB 2.371 2.623 2.874 ... nan nan nan\n",
      "    wind_speed  (region, time) float64 34kB 9.731 9.954 10.18 ... nan nan nan\n",
      "    wind_dir    (region, time) float64 34kB 284.0 285.1 286.1 ... nan nan nan\n",
      "Attributes: (12/17)\n",
      "    WAVEWATCH_III_version_number:           4.18b\n",
      "    WAVEWATCH_III_switches:                 F90 NOGRB LRB4 DIST MPI NOPA UQ P...\n",
      "    SIN4 namelist parameter BETAMAX:        1.33\n",
      "    SDS4 namelist parameter WHITECAPWIDTH:  0.3\n",
      "    product_name:                           ww3.aus_4m.202412.nc\n",
      "    area:                                   4 min Australian grid\n",
      "    ...                                     ...\n",
      "    easternmost_longitude:                  175.0000000\n",
      "    minimum_altitude:                       -12000 m\n",
      "    maximum_altitude:                       9000 m\n",
      "    altitude_resolution:                    n/a\n",
      "    start_date:                             2024-12-01T00:00:00Z\n",
      "    stop_date:                              2024-12-31T23:00:00Z\n"
     ]
    }
   ],
   "source": [
    "# Compute mean per region\n",
    "region_mean = wave_wind.groupby(\"region\").mean(dim=\"point\")\n",
    "print(region_mean)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "26569c2d-c967-464b-b4a2-ab83bed45ac1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<xarray.Dataset> Size: 306kB\n",
      "Dimensions:      (region: 3, time: 1416)\n",
      "Coordinates:\n",
      "  * time         (time) datetime64[ns] 11kB 2025-02-01 ... 2025-03-31T23:00:0...\n",
      "    number       int64 8B 0\n",
      "    expver       (time) <U4 23kB '0001' '0001' '0001' ... '0001' '0001' '0001'\n",
      "  * region       (region) object 24B 'Central' 'North' 'South'\n",
      "Data variables:\n",
      "    hs           (region, time) float32 17kB dask.array<chunksize=(1, 1416), meta=np.ndarray>\n",
      "    t02          (region, time) float32 17kB dask.array<chunksize=(1, 1416), meta=np.ndarray>\n",
      "    fp           (region, time) float32 17kB dask.array<chunksize=(1, 1416), meta=np.ndarray>\n",
      "    dir          (region, time) float32 17kB dask.array<chunksize=(1, 1416), meta=np.ndarray>\n",
      "    dp           (region, time) float32 17kB dask.array<chunksize=(1, 1416), meta=np.ndarray>\n",
      "    cge          (region, time) float32 17kB dask.array<chunksize=(1, 1416), meta=np.ndarray>\n",
      "    u10          (region, time) float64 34kB -9.375 -9.54 -9.705 ... nan nan nan\n",
      "    v10          (region, time) float64 34kB 2.371 2.623 2.874 ... nan nan nan\n",
      "    wind_speed   (region, time) float64 34kB 9.731 9.954 10.18 ... nan nan nan\n",
      "    wind_dir     (region, time) float64 34kB 284.0 285.1 286.1 ... nan nan nan\n",
      "    wave_energy  (region, time) float32 17kB dask.array<chunksize=(1, 1416), meta=np.ndarray>\n",
      "    wave_power   (region, time) float32 17kB dask.array<chunksize=(1, 1416), meta=np.ndarray>\n",
      "Attributes: (12/17)\n",
      "    WAVEWATCH_III_version_number:           4.18b\n",
      "    WAVEWATCH_III_switches:                 F90 NOGRB LRB4 DIST MPI NOPA UQ P...\n",
      "    SIN4 namelist parameter BETAMAX:        1.33\n",
      "    SDS4 namelist parameter WHITECAPWIDTH:  0.3\n",
      "    product_name:                           ww3.aus_4m.202412.nc\n",
      "    area:                                   4 min Australian grid\n",
      "    ...                                     ...\n",
      "    easternmost_longitude:                  175.0000000\n",
      "    minimum_altitude:                       -12000 m\n",
      "    maximum_altitude:                       9000 m\n",
      "    altitude_resolution:                    n/a\n",
      "    start_date:                             2024-12-01T00:00:00Z\n",
      "    stop_date:                              2024-12-31T23:00:00Z\n"
     ]
    }
   ],
   "source": [
    "rho = 1025  # seawater density (kg/m³)\n",
    "g = 9.81    # gravity (m/s²)\n",
    "\n",
    "# Derived energy and power\n",
    "region_mean[\"wave_energy\"] = (1/8) * rho * g * (region_mean.hs ** 2)\n",
    "region_mean[\"wave_power\"]  = (rho * g**2 * (region_mean.hs ** 2) * region_mean.t02) / (32 * np.pi)\n",
    "\n",
    "print(region_mean)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "19f66449-e0ba-4941-b17a-1acb144c3890",
   "metadata": {},
   "source": [
    "### Define cyclone"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "id": "bced0511-819c-4289-a552-fd080ead7df4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Central region:\n",
      "  2025-02-25 11:00 → 2025-03-02 16:00\n",
      "\n",
      "North region:\n",
      "  2025-02-22 05:00 → 2025-02-22 13:00\n",
      "  2025-02-25 08:00 → 2025-03-02 19:00\n",
      "\n",
      "South region:\n",
      "  2025-02-26 05:00 → 2025-03-02 13:00\n"
     ]
    }
   ],
   "source": [
    "def detect_events(hs_series):\n",
    "    \"\"\"Detect high-energy events for a single region.\"\"\"\n",
    "    high2 = hs_series > 2\n",
    "    high3 = hs_series > 3\n",
    "    events = []\n",
    "    in_event = False\n",
    "    start = None\n",
    "\n",
    "    for i in range(len(hs_series)):\n",
    "        if high3.iloc[i] or high2.iloc[i]:\n",
    "            if not in_event:\n",
    "                start = hs_series.index[i]\n",
    "                in_event = True\n",
    "        else:\n",
    "            if in_event:\n",
    "                end = hs_series.index[i]\n",
    "                dur = (end - start).total_seconds() / 3600\n",
    "                if dur >= 72 or (hs_series[start:end] > 3).any():\n",
    "                    events.append((start, end))\n",
    "                in_event = False\n",
    "\n",
    "    # Merge events within 24h\n",
    "    merged = []\n",
    "    for s, e in events:\n",
    "        if not merged or (s - merged[-1][1]).total_seconds() / 3600 > 24:\n",
    "            merged.append([s, e])\n",
    "        else:\n",
    "            merged[-1][1] = e\n",
    "    return merged\n",
    "\n",
    "\n",
    "# Detect events for all regions\n",
    "event_dict = {}\n",
    "\n",
    "for region in region_mean.region.values:\n",
    "    hs = region_mean.sel(region=region)[\"hs\"].to_pandas().resample(\"1h\").mean()\n",
    "    event_dict[region] = detect_events(hs)\n",
    "    print(f\"\\n{region} region:\")\n",
    "    for s, e in event_dict[region]:\n",
    "        print(f\"  {s:%Y-%m-%d %H:%M} → {e:%Y-%m-%d %H:%M}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c2a9ff66-4b28-4485-be78-cb2355afaaed",
   "metadata": {},
   "source": [
    "### Ensure region_mean autimatically carries over to derived variables"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "id": "4c78602b-a9a0-43bf-aa73-b39ad473948d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Saved region_timeseries_figures/north_timeseries.png and region_timeseries_figures/north_timeseries.pdf\n",
      "Saved region_timeseries_figures/central_timeseries.png and region_timeseries_figures/central_timeseries.pdf\n",
      "Saved region_timeseries_figures/south_timeseries.png and region_timeseries_figures/south_timeseries.pdf\n"
     ]
    }
   ],
   "source": [
    "if \"wave_power\" not in region_mean:\n",
    "    rho = 1025  # seawater density (kg/m³)\n",
    "    g = 9.81    # gravity (m/s²)\n",
    "    region_mean[\"wave_power\"] = (rho * g**2 * (region_mean.hs ** 2) * region_mean.t02) / (32 * np.pi)\n",
    "    \n",
    "#Ensure output folder exists\n",
    "os.makedirs(\"region_timeseries_figures\", exist_ok=True)\n",
    "\n",
    "# ordered variables & title\n",
    "variables = [\"hs\", \"t02\", \"wave_power\", \"dir\", \"wind_speed\", \"wind_dir\"]\n",
    "titles = [\n",
    "    \"Sig Wave Height (m)\",       # updated label\n",
    "    \"Mean Wave Period (T02, s)\",\n",
    "    \"Wave Power (W/m)\",\n",
    "    \"Wave Direction (°)\",\n",
    "    \"Wind Speed (m/s)\",\n",
    "    \"Wind Direction (°)\"\n",
    "]\n",
    "\n",
    "region_order = [\"North\", \"Central\", \"South\"]\n",
    "colors = {\"North\": \"tab:blue\", \"Central\": \"tab:orange\", \"South\": \"tab:green\"}\n",
    "\n",
    "for region in region_order:\n",
    "    fig, axs = plt.subplots(\n",
    "        len(variables), 1, figsize=(12, 12), sharex=True\n",
    "    )\n",
    "\n",
    "    for ax, var, title in zip(axs, variables, titles):\n",
    "        # Plot time series\n",
    "        ax.plot(\n",
    "            region_mean.time,\n",
    "            region_mean.sel(region=region)[var],\n",
    "            color=colors[region],\n",
    "            linewidth=1.3,\n",
    "            label=region\n",
    "        )\n",
    "\n",
    "        # Highlight cyclone events for this region\n",
    "        for s, e in event_dict[region]:\n",
    "            ax.axvspan(s, e, color=colors[region], alpha=0.15, zorder=0)\n",
    "\n",
    "        ax.set_ylabel(title, labelpad=8)\n",
    "        ax.grid(alpha=0.3)\n",
    "        ax.legend(loc=\"upper right\", frameon=False, fontsize=8)\n",
    "        ax.set_title(title, fontsize=10, pad=6)\n",
    "\n",
    "    axs[-1].set_xlabel(\"Time (Feb–Mar 2025)\", labelpad=6)\n",
    "\n",
    "    # Add a supertitle with enough margin space above plots\n",
    "    plt.suptitle(\n",
    "        f\"{region} Region – Hydrodynamic & Wind Conditions (Cyclone Alfred)\",\n",
    "        fontsize=13,\n",
    "        y=0.93  # lowered slightly to sit above top subplot\n",
    "    )\n",
    "\n",
    "    # Adjust layout manually for cleaner spacing\n",
    "    plt.tight_layout(rect=[0, 0, 1, 0.95])\n",
    "\n",
    "    # Save high-resolution figures\n",
    "    png_path = f\"region_timeseries_figures/{region.lower()}_timeseries.png\"\n",
    "    pdf_path = f\"region_timeseries_figures/{region.lower()}_timeseries.pdf\"\n",
    "    plt.savefig(png_path, dpi=300, bbox_inches=\"tight\")\n",
    "    plt.savefig(pdf_path, dpi=300, bbox_inches=\"tight\")\n",
    "    print(f\"Saved {png_path} and {pdf_path}\")\n",
    "\n",
    "    plt.close(fig)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "id": "d1b23bc4-5ca6-41db-90fc-5a6f778e13e4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Regional summary table saved as: Regional_Summary.xlsx\n",
      "    region  hs_mean  hs_max  hs_min  hs_std  t02_mean  t02_max  t02_min  \\\n",
      "0  Central    1.912   5.406   0.901   0.769     5.237    8.705    3.878   \n",
      "1    North    1.985   5.234   0.984   0.780     5.365    9.454    3.918   \n",
      "2    South    1.785   5.309   0.752   0.719     5.071    8.065    3.813   \n",
      "\n",
      "   t02_std  wave_power_mean  ...  dir_min    dir_std  wind_speed_mean  \\\n",
      "0    0.902     24096.480469  ...   14.928  16.166000            8.371   \n",
      "1    0.980     26283.542969  ...    9.117  16.891001            8.408   \n",
      "2    0.793     20358.349609  ...   15.829  15.547000            8.125   \n",
      "\n",
      "   wind_speed_max  wind_speed_min  wind_speed_std  wind_dir_mean  \\\n",
      "0          14.893           1.924           2.717        261.288   \n",
      "1          14.323           1.369           2.678        261.515   \n",
      "2          14.918           1.735           2.643        262.405   \n",
      "\n",
      "   wind_dir_max  wind_dir_min  wind_dir_std  \n",
      "0       349.157        22.968        63.550  \n",
      "1       343.916        12.996        64.047  \n",
      "2       352.944        30.167        64.497  \n",
      "\n",
      "[3 rows x 25 columns]\n"
     ]
    }
   ],
   "source": [
    "# Select key variables from region_mean\n",
    "vars_to_summarise = [\"hs\", \"t02\", \"wave_power\", \"dir\", \"wind_speed\", \"wind_dir\"]\n",
    "\n",
    "# Convert to DataFrame\n",
    "df = region_mean[vars_to_summarise].to_dataframe().reset_index()\n",
    "\n",
    "# Compute summary stats for each region\n",
    "summary = (\n",
    "    df.groupby(\"region\")[vars_to_summarise]\n",
    "      .agg([\"mean\", \"max\", \"min\", \"std\"])\n",
    ")\n",
    "\n",
    "# Flatten multi-index columns\n",
    "summary.columns = ['_'.join(col).strip() for col in summary.columns.values]\n",
    "summary.reset_index(inplace=True)\n",
    "\n",
    "# Round values\n",
    "summary = summary.round(3)\n",
    "\n",
    "# Save to Excel in current directory\n",
    "output_path = \"Regional_Summary.xlsx\"\n",
    "summary.to_excel(output_path, index=False)\n",
    "\n",
    "print(f\"Regional summary table saved as: {output_path}\")\n",
    "print(summary)\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python [conda env:base] *",
   "language": "python",
   "name": "conda-base-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.13.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
